import org.scaledl.architecturaltemplates.repositories.cloudscale.black.ProfilesLibrary;

modeltype PRM uses 'http://simulizar.palladiosimulator.org/RuntimeMeasurement/1.0';
modeltype PCM_ALLOC uses 'http://palladiosimulator.org/PalladioComponentModel/Allocation/5.1';
modeltype PCM_RES_ENV uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceEnvironment/5.1';

transformation ScaleDown(in prm : PRM, inout pcmAllocation : PCM_ALLOC);
property scaleDownStepSize : String;
property scaleDownThreshold : Real;
property minRate : String;

main() {
log ('AT Completion "ScaleDown" started');	
	
	assert fatal(prm.rootObjects()[RuntimeMeasurement]->size() > 0)
		with log ("No Measurements found!");
			
	assert fatal(pcmAllocation.rootObjects()[Allocation]->size() > 0)
		with log ("Allocation Model is empty!");
		
	var allocation : Allocation := pcmAllocation.rootObjects()![Allocation];
	var resourceEnvironment : ResourceEnvironment := allocation.targetResourceEnvironment_Allocation;
	var resourceContainers : Set(ResourceContainer) := resourceEnvironment.resourceContainer_ResourceEnvironment;
	assert fatal(hasAppliedStereotype(resourceContainers,"VirtualizedResourceContainer"))
		with log ("There is no Virtualized Stereotype Application!");
		
	resourceContainers -> forEach(resourceContainer){
		if(hasAppliedStereotype(resourceContainer,"VirtualizedResourceContainer")){
			scaleDownThreshold := getDoubleTaggedValue(resourceContainer, "scaleDownThreshold", "VirtualizedResourceContainer");
			scaleDownStepSize := getStringTaggedValue(resourceContainer, "stepSize", "VirtualizedResourceContainer");
			minRate := getStringTaggedValue(resourceContainer, "minRate", "VirtualizedResourceContainer");
			resourceContainer. map scaleDownVirtualizedContainer();
		};
	};
	log ('AT Completion "ScaleDown" finished');	
}
// FIXME need to check whether it's the right model element
query Set(RuntimeMeasurement) :: checkCondition() : Boolean
{
	return self->exists(measurement | measurement.measuringValue < scaleDownThreshold)
}

mapping ResourceContainer::scaleDownVirtualizedContainer():ResourceContainer 
	when{prm.rootObjects()[RuntimeMeasurement]->checkCondition()}
{
	log ('Scaling Down ResourceContainer ' + self.entityName);
	scaleDownProcessingResourcesRecursively(self);
}

/**
 * Recursively scale up ProcessingResources.
 */
helper scaleDownProcessingResourcesRecursively(resourceContainer : ResourceContainer) {

	// decrease processing rate by scaleDown
	resourceContainer.activeResourceSpecifications_ResourceContainer->forEach(processingResourceSpecification){
		var currentProcessingRate : String := processingResourceSpecification.processingRate_ProcessingResourceSpecification.specification;
    	var newProcessingRate : String := "("+currentProcessingRate + ")+" + scaleDownStepSize;
    	if(newProcessingRate >= minRate){
    		processingResourceSpecification.processingRate_ProcessingResourceSpecification.specification := newProcessingRate;
    	}else{
    		processingResourceSpecification.processingRate_ProcessingResourceSpecification.specification := newProcessingRate;
    	};
    };
    
    // recursive call
	resourceContainer.nestedResourceContainers__ResourceContainer->forEach(nestedResourceContainer){
		scaleDownProcessingResourcesRecursively(nestedResourceContainer);
	};		
}