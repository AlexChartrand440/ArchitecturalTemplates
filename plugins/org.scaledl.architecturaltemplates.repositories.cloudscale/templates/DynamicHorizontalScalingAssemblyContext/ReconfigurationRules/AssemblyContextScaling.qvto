import org.scaledl.architecturaltemplates.repositories.cloudscale.black.ProfilesLibrary;
import ReverseLoadbalancing;
import Loadbalancing;

modeltype PCM_ALLOC uses 'http://sdq.ipd.uka.de/PalladioComponentModel/Allocation/5.0';
modeltype PCMComposition uses pcm::core::composition('http://sdq.ipd.uka.de/PalladioComponentModel/5.0');
modeltype PRM uses 'http://simulizar.palladiosimulator.org/RuntimeMeasurement/1.0';
	
transformation AssemblyContextScaling(in prm : PRM, inout pcmAllocation : PCM_ALLOC) 
access transformation Loadbalancing, ReverseLoadbalancing;

property numberOfReplicas : Integer;
property scaleInThreshold : Real;
property scaleOutThreshold : Real;

main() {
	assert fatal(prm.rootObjects()[RuntimeMeasurement]->size() > 0)
		with log ("No Measurements found!");
			
	assert fatal(pcmAllocation.rootObjects()[Allocation]->size() > 0)
		with log ("Allocation Model is empty!");
		
	var allocation : Allocation := pcmAllocation.rootObjects()![Allocation];
	var allocationContexts : Set(AllocationContext) := allocation.allocationContexts_Allocation;
	var assemblyContexts : Set(AssemblyContext);
	allocationContexts -> forEach(allocationContext){
		assemblyContexts += allocationContext.assemblyContext_AllocationContext;
	};
	
	//get the stereotyped AssemblyContext
	var loadBalancedAssemblyContext : AssemblyContext := assemblyContexts -> selectOne(assemblyContext : AssemblyContext |
						hasAppliedStereotype(assemblyContext,"ReplicableAssemblyContext"));
						
	assert fatal(loadBalancedAssemblyContext != null)
		with log ("There is no Replicable Assembly Context Stereotype Application!");

	numberOfReplicas := getIntTaggedValue(loadBalancedAssemblyContext,"numberOfReplicas","ReplicableAssemblyContext");
	scaleInThreshold := getDoubleTaggedValue(loadBalancedAssemblyContext,"scaleInThreshold","ReplicableAssemblyContext");
	scaleOutThreshold := getDoubleTaggedValue(loadBalancedAssemblyContext,"scaleOutThreshold","ReplicableAssemblyContext");	
	
	var reverseLoadbalancingTransformation : ReverseLoadbalancing := new ReverseLoadbalancing(prm,pcmAllocation);
	var loadbalancingTransformation : Loadbalancing := new Loadbalancing(prm,pcmAllocation);
	//The setting of the configuration properties to false could be unnecessary
	if(prm.rootObjects()[RuntimeMeasurement]->checkScaleInCondition() and numberOfReplicas > 1){
		reverseLoadbalancingTransformation.loadbalanced := true;
		reverseLoadbalancingTransformation->transform();
		reverseLoadbalancingTransformation.loadbalanced := false;
		numberOfReplicas:= numberOfReplicas -1;
		setTaggedValue(loadBalancedAssemblyContext,numberOfReplicas,"ReplicableAssemblyContext","numberOfReplicas");
		loadbalancingTransformation.reverseLoadbalanced := true;
		loadbalancingTransformation->transform();
		loadbalancingTransformation.reverseLoadbalanced := false;
	}
	else if(prm.rootObjects()[RuntimeMeasurement]->checkScaleOutCondition()){
		reverseLoadbalancingTransformation.loadbalanced := true;
		reverseLoadbalancingTransformation->transform();
		reverseLoadbalancingTransformation.loadbalanced := false;
		numberOfReplicas:= numberOfReplicas +1;
		setTaggedValue(loadBalancedAssemblyContext,numberOfReplicas,"ReplicableAssemblyContext","numberOfReplicas");
		loadbalancingTransformation.reverseLoadbalanced := true;
		loadbalancingTransformation->transform();
		loadbalancingTransformation.reverseLoadbalanced := false;
	};
}

helper Set(RuntimeMeasurement) :: checkScaleOutCondition() : Boolean {
	
		self->forEach(measurement) {
		log('Measured value is ' + measurement.measuringValue.toString());
		
			if (measurement.measuringValue > scaleOutThreshold) {
				return true;
			};
		};
		
		log('No measurements match the condition. Number of measurements is ' + self->size().toString());
		return false;
}
	
helper Set(RuntimeMeasurement) :: checkScaleInCondition() : Boolean {
	
		self->forEach(measurement) {
		log('Measured value is ' + measurement.measuringValue.toString());
		
			if (measurement.measuringValue < scaleInThreshold) {
				return true;
			};
		};
		
		log('No measurements match the condition. Number of measurements is ' + self->size().toString());
		return false;
}
	