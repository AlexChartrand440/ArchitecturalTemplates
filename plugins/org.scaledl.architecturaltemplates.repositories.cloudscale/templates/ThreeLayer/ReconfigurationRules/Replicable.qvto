import org.scaledl.architecturaltemplates.repositories.cloudscale.black.ProfilesLibrary;

modeltype PRM uses 'http://simulizar.palladiosimulator.org/PalladioRuntimeMonitoring/1.0';
modeltype PCM_ALLOC uses 'http://sdq.ipd.uka.de/PalladioComponentModel/Allocation/5.0';
modeltype PCM_REP uses 'http://sdq.ipd.uka.de/PalladioComponentModel/Repository/5.0';
modeltype PCM_SYS uses 'http://sdq.ipd.uka.de/PalladioComponentModel/System/5.0';
modeltype PCM_RES_ENV uses 'http://sdq.ipd.uka.de/PalladioComponentModel/ResourceEnvironment/5.0';
modeltype PCM_CORE uses 'http://sdq.ipd.uka.de/PalladioComponentModel/Core/5.0';
modeltype EMF_PROFILE_APPLICATION uses 'http://www.modelversioning.org/emfprofile/application/1.1';
modeltype EMF_PROFILE uses 'http://www.modelversioning.org/emfprofile/1.1';
modeltype PCM_RES_TYPE uses 'http://sdq.ipd.uka.de/PalladioComponentModel/ResourceType/5.0';
modeltype PCMCore uses pcm::core('http://sdq.ipd.uka.de/PalladioComponentModel/5.0');
modeltype PCMEntity uses pcm::core::entity('http://sdq.ipd.uka.de/PalladioComponentModel/5.0');
modeltype PCMComposition uses pcm::core::composition('http://sdq.ipd.uka.de/PalladioComponentModel/5.0');
modeltype PCMStoex uses stoex('http://sdq.ipd.uka.de/StochasticExpressions/2.2');
modeltype SEFF uses pcm::seff('http://sdq.ipd.uka.de/PalladioComponentModel/SEFF/5.0');

transformation ReplicableTransformation(in prm : PRM, inout pcmAllocation : PCM_ALLOC);

property threshold : Real = 3.0;

main() {
	log ('Main: Hello, here starts the Transformation!');	
	
	assert fatal(prm.rootObjects()[PRMMeasurement]->size() > 0)
		with log ("No Measurements found!");
			
	assert fatal(pcmAllocation.rootObjects()[Allocation]->size() > 0)
		with log ("Allocation Model is empty!");
			
	var allocation : Allocation := pcmAllocation.rootObjects()![Allocation];
	var resourceEnvironment : ResourceEnvironment := allocation.targetResourceEnvironment_Allocation;
	var resourceContainer : Set(ResourceContainer) := resourceEnvironment.resourceContainer_ResourceEnvironment;
	assert fatal(appliedStereotypesEqualsOne(resourceContainer,"Replicable"))
		with log ("There is more than one Replicable Stereotype Application!");
	var resourceContainers : Set(ResourceContainer) := resourceEnvironment.resourceContainer_ResourceEnvironment;
	var replicatedResourceContainers : Bag(ResourceContainer) := resourceContainers -> duplicateReplicableResourceContainer();
	createAssemblyAndAllocationContexts(replicatedResourceContainers);
}

//blackbox helper hasAppliedStereotype(resourceContainer:Entity, stereotypeName:String):Boolean;
//blackbox helper appliedStereotypesEqualsOne(resourceContainerSet:Set(Entity),stereotypeName:String):Boolean;

helper Set(PRMMeasurement) :: checkCondition() : Boolean {
	
		self->forEach(measurement) {
		log('Measured value is ' + measurement.measuringValue.toString());
		
			if (measurement.measuringValue > threshold) {
				return true;
			};
		};
		
		log('No measurements match the condition. Number of measurements is ' + self->size().toString());
		return false;
	}
	
mapping ResourceContainer::duplicateReplicableResourceContainer():ResourceContainer 
	when{hasAppliedStereotype(self,"Replicable") and prm.rootObjects()[PRMMeasurement]->checkCondition()}
{
	log ('Start of ResourceContainer duplication of '+self.entityName);
	
	entityName := self.entityName +"_duplicate";
	//id := self.id +"_duplicate";
	resourceEnvironment_ResourceContainer := self.resourceEnvironment_ResourceContainer;
	var activeResourceSpecifications : Set(ProcessingResourceSpecification) := self.activeResourceSpecifications_ResourceContainer;
	
	activeResourceSpecifications_ResourceContainer += activeResourceSpecifications -> forEach(activeResource){
		new ProcessingResourceSpecification(activeResource, self.resolveone(ResourceContainer));
	};
	
	var resourceContainerLinkingResources := self.resourceEnvironment_ResourceContainer.linkingResources__ResourceEnvironment 
											-> select( l :LinkingResource | l.connectedResourceContainers_LinkingResource ->includes(self));
	resourceContainerLinkingResources ->forEach(linkingResource){
		linkingResource.connectedResourceContainers_LinkingResource += self.resolveone(ResourceContainer);
	};	
	
	// TODO Add nested resource containers
}

helper createAssemblyAndAllocationContexts(resourceContainers:Bag(ResourceContainer)){
	log ('Start of createAssemblyAndAllocationContexts');
	resourceContainers -> forEach(resourceContainer){
	var originalResourceContainer : ResourceContainer := resourceContainer.invresolveone(ResourceContainer);
	var allocation : Allocation := pcmAllocation.rootObjects()![Allocation];
	var system : System := allocation.system_Allocation![System];
	var connectors : Set(Connector) := system.connectors__ComposedStructure;
	var loadBalancerResourceContainer : ResourceContainer := getLoadBalancerResourceContainer(originalResourceContainer);

	connectors->forEach(connector) {
		log ('Start of connector for each loop');
		var targetAssemblyContext : AssemblyContext;
		if (connector.oclIsTypeOf(AssemblyConnector)) {
			log ('Start of assembly connector for each loop');
			var assemblyConnector : AssemblyConnector := connector.oclAsType(AssemblyConnector);
		
			var sourceAssemblyContext : AssemblyContext := getRequiringAssemblyContext(assemblyConnector);
			var sourceResourceContainer : ResourceContainer := findResourceContainer(sourceAssemblyContext);

			targetAssemblyContext := getProvidingAssemblyContext(assemblyConnector);
			var targetResourceContainer : ResourceContainer := findResourceContainer(targetAssemblyContext);
			
			
			if(targetResourceContainer.id = originalResourceContainer.id and sourceResourceContainer.id != targetResourceContainer.id) {
				var loadBalancerAssemblyContext : AssemblyContext := assemblyConnector.providedRole_AssemblyConnector.createLoadBalancer(loadBalancerResourceContainer,targetAssemblyContext);
				var loadBalancerProvidedRoles : Bag(OperationProvidedRole) := loadBalancerAssemblyContext.encapsulatedComponent__AssemblyContext.providedRoles_InterfaceProvidingEntity.oclAsType(OperationProvidedRole);
				var loadBalancerProvidedRole : OperationProvidedRole := loadBalancerProvidedRoles -> selectOne(op : OperationProvidedRole | op.providedInterface__OperationProvidedRole = assemblyConnector.providedRole_AssemblyConnector.providedInterface__OperationProvidedRole);
				var loadBalancerAllRequiredRoles : Bag(OperationRequiredRole) := loadBalancerAssemblyContext.encapsulatedComponent__AssemblyContext.requiredRoles_InterfaceRequiringEntity.oclAsType(OperationRequiredRole);
				var loadBalancerNeededRequiredRoles : Bag(OperationRequiredRole) := loadBalancerAllRequiredRoles -> select(operationRequiredRole:OperationRequiredRole|operationRequiredRole.requiredInterface__OperationRequiredRole=assemblyConnector.providedRole_AssemblyConnector.providedInterface__OperationProvidedRole);
				var duplicatedAssemblyContext : AssemblyContext := targetAssemblyContext.duplicateAssemblyAndAllocationContexts(resourceContainer); 
				var duplicatedAssemblyContextProvidedRoles : Bag(OperationProvidedRole) := duplicatedAssemblyContext.encapsulatedComponent__AssemblyContext.providedRoles_InterfaceProvidingEntity.oclAsType(OperationProvidedRole);
				var duplicatedAssemblyContextProvidedRole : OperationProvidedRole := duplicatedAssemblyContextProvidedRoles -> selectOne(op:OperationProvidedRole|op.providedInterface__OperationProvidedRole = assemblyConnector.providedRole_AssemblyConnector.providedInterface__OperationProvidedRole);
				
		
				new AssemblyConnector(loadBalancerAssemblyContext,loadBalancerNeededRequiredRoles -> selectOne(requiredRole:OperationRequiredRole | requiredRole.entityName.endsWith("LoadBalancer_1")), assemblyConnector.providedRole_AssemblyConnector,targetAssemblyContext);
				new AssemblyConnector(loadBalancerAssemblyContext,loadBalancerNeededRequiredRoles -> selectOne(requiredRole:OperationRequiredRole | requiredRole.entityName.endsWith("LoadBalancer_2")),duplicatedAssemblyContextProvidedRole,duplicatedAssemblyContext);
				assemblyConnector.providingAssemblyContext_AssemblyConnector := loadBalancerAssemblyContext;
				assemblyConnector.providedRole_AssemblyConnector := loadBalancerProvidedRole;
				if (targetAssemblyContext.encapsulatedComponent__AssemblyContext.requiredRoles_InterfaceRequiringEntity != null){
					addRequiredRolesAssemblyConnectors(targetAssemblyContext,duplicatedAssemblyContext);
					addRequiredRolesSystemDelegationConnectors(targetAssemblyContext,duplicatedAssemblyContext);
				};

			}	
		} else if (connector.oclIsTypeOf(ProvidedDelegationConnector)) {
			log ('Start of delegation connector for each loop');
			var delegationConnector : ProvidedDelegationConnector := connector.oclAsType(ProvidedDelegationConnector);
			targetAssemblyContext := getProvidingAssemblyContext(delegationConnector);
			var targetResourceContainer : ResourceContainer := findResourceContainer(targetAssemblyContext);
			
			if(targetResourceContainer.id = originalResourceContainer.id){
				var loadBalancerAssemblyContext : AssemblyContext := delegationConnector.innerProvidedRole_ProvidedDelegationConnector.createLoadBalancer(loadBalancerResourceContainer,targetAssemblyContext);
				var duplicatedAssemblyContext : AssemblyContext := targetAssemblyContext.duplicateAssemblyAndAllocationContexts(resourceContainer); 
				var delegationConnectorProvidedInterface := delegationConnector.innerProvidedRole_ProvidedDelegationConnector.providedInterface__OperationProvidedRole;
				var loadBalancerProvidedRoles : Bag(OperationProvidedRole) := loadBalancerAssemblyContext.encapsulatedComponent__AssemblyContext.providedRoles_InterfaceProvidingEntity.oclAsType(OperationProvidedRole);
				var commonProvidedRoleOfDelegationConnectorAndLB : OperationProvidedRole := loadBalancerProvidedRoles -> selectOne(providedRole : OperationProvidedRole| providedRole.providedInterface__OperationProvidedRole.entityName = delegationConnectorProvidedInterface.entityName );
				var oldDelegationConnectorTargetAssemblyContext := delegationConnector.assemblyContext_ProvidedDelegationConnector;
				var oldDelegationConnectorProvidedRole := delegationConnector.innerProvidedRole_ProvidedDelegationConnector;
				var loadBalancerAllRequiredRoles : Bag(OperationRequiredRole) := loadBalancerAssemblyContext.encapsulatedComponent__AssemblyContext.requiredRoles_InterfaceRequiringEntity.oclAsType(OperationRequiredRole);
				var loadBalancerNeededRequiredRoles : Bag(OperationRequiredRole) := loadBalancerAllRequiredRoles -> select(operationRequiredRole:OperationRequiredRole|operationRequiredRole.requiredInterface__OperationRequiredRole=oldDelegationConnectorProvidedRole.providedInterface__OperationProvidedRole);
				var duplicatedAssemblyContextProvidedRoles : Bag(OperationProvidedRole) := duplicatedAssemblyContext.encapsulatedComponent__AssemblyContext.providedRoles_InterfaceProvidingEntity.oclAsType(OperationProvidedRole);
				var duplicatedAssemblyContextProvidedRole : OperationProvidedRole := duplicatedAssemblyContextProvidedRoles -> selectOne(op:OperationProvidedRole|op.providedInterface__OperationProvidedRole = oldDelegationConnectorProvidedRole.providedInterface__OperationProvidedRole);
			
				delegationConnector.innerProvidedRole_ProvidedDelegationConnector := commonProvidedRoleOfDelegationConnectorAndLB;
				delegationConnector.assemblyContext_ProvidedDelegationConnector := loadBalancerAssemblyContext;
				
				new AssemblyConnector(loadBalancerAssemblyContext,loadBalancerNeededRequiredRoles -> selectOne(requiredRole:OperationRequiredRole | requiredRole.entityName.endsWith("LoadBalancer_1")),oldDelegationConnectorProvidedRole,oldDelegationConnectorTargetAssemblyContext);
				new AssemblyConnector(loadBalancerAssemblyContext,loadBalancerNeededRequiredRoles -> selectOne(requiredRole:OperationRequiredRole | requiredRole.entityName.endsWith("LoadBalancer_2")),duplicatedAssemblyContextProvidedRole,duplicatedAssemblyContext);
				if (targetAssemblyContext.encapsulatedComponent__AssemblyContext.requiredRoles_InterfaceRequiringEntity != null){
					addRequiredRolesAssemblyConnectors(targetAssemblyContext,duplicatedAssemblyContext);
					addRequiredRolesSystemDelegationConnectors(targetAssemblyContext,duplicatedAssemblyContext);
				};
			}
		}
	};
};
}

helper ProvidedRole::createLoadBalancer(rc:ResourceContainer,ac:AssemblyContext):AssemblyContext{ 
	log ('Start of createLoadBalancer Method');
	var loadBalancer : BasicComponent := new BasicComponent(self,ac);
	var loadBalancerAssembly : AssemblyContext := new AssemblyContext(loadBalancer);
	var loadBalancerAllocationContext : AllocationContext := new AllocationContext(loadBalancerAssembly,rc);
	return loadBalancerAssembly;
};

helper AssemblyContext :: duplicateAssemblyAndAllocationContexts(rc:ResourceContainer):AssemblyContext{
	log ('Start of duplicateAssemblyAndAllocationContexts Method');
	var basicComponent : BasicComponent := self.encapsulatedComponent__AssemblyContext.oclAsType(BasicComponent);
	log ('Start of duplicate AssemblyContext');
	var duplicatedAssemblyContext : AssemblyContext := new AssemblyContext(basicComponent);
	log ('Start of duplicate AllocationContexts');
	var duplicatedAllocationContext : AllocationContext := new AllocationContext(duplicatedAssemblyContext, rc);
	return duplicatedAssemblyContext;
};


constructor AssemblyConnector :: AssemblyConnector(requiringAssemblyContext : AssemblyContext,requiredRole:OperationRequiredRole, providedRole: OperationProvidedRole, providingAssemblyContext : AssemblyContext){
	log ('Start of assemblyConnector creation');
	var allocation : Allocation := pcmAllocation.rootObjects()![Allocation];
	var system : System := allocation.system_Allocation![System];
	entityName := requiringAssemblyContext.entityName + "_" + providingAssemblyContext.entityName;
	//id := requiringAssemblyContext.id + "_" + providingAssemblyContext.id;
	providingAssemblyContext_AssemblyConnector := providingAssemblyContext;
	requiringAssemblyContext_AssemblyConnector := requiringAssemblyContext;
	providedRole_AssemblyConnector := providedRole;
	requiredRole_AssemblyConnector := requiredRole;
	parentStructure__Connector := system;
}

constructor RequiredDelegationConnector :: RequiredDelegationConnector(assemblyContext : AssemblyContext, innerRequiredRole : OperationRequiredRole, outerRequiredRole : OperationRequiredRole){
	log ('Start of delegationConnector creation');
	entityName := "RequiredDelegation " + innerRequiredRole.entityName + " " + outerRequiredRole.entityName;
	//id := innerRequiredRole.id + outerRequiredRole.id;
	assemblyContext_RequiredDelegationConnector := assemblyContext;
	innerRequiredRole_RequiredDelegationConnector := innerRequiredRole;
	outerRequiredRole_RequiredDelegationConnector := outerRequiredRole;
}

constructor ProcessingResourceSpecification:: ProcessingResourceSpecification(p:ProcessingResourceSpecification, rc : ResourceContainer){
	//id := p.id + "_duplicate";
	MTTF := p.MTTR;
	MTTR := p.MTTR;
	schedulingPolicy := p.schedulingPolicy;
	requiredByContainer := p.requiredByContainer;
	processingRate_ProcessingResourceSpecification := new PCMRandomVariable(p.processingRate_ProcessingResourceSpecification);
	numberOfReplicas := p.numberOfReplicas;
	activeResourceType_ActiveResourceSpecification := p.activeResourceType_ActiveResourceSpecification;
	resourceContainer_ProcessingResourceSpecification := rc;
}

constructor PCMRandomVariable :: PCMRandomVariable(pcmRandomVariable:PCMRandomVariable){
	specification := pcmRandomVariable.specification;
}

-- FIXME Generally, BasicComponents can have several provided roles
-- FIXME SEFFs do not support variables
constructor BasicComponent :: BasicComponent (pr : ProvidedRole, ac:AssemblyContext){
log ('Start of LoadBalancer Constructor');
	var repository := ac.encapsulatedComponent__AssemblyContext.repository__RepositoryComponent;
	var operationProvidedRole : OperationProvidedRole := pr.oclAsType(OperationProvidedRole);
	var providingEntity : RepositoryComponent := pr.providingEntity_ProvidedRole.oclAsType(RepositoryComponent);
	//id := providingEntity.id + "_LoadBalancer";
	entityName := "LoadBalancer_"+ providingEntity.entityName;
	repository__RepositoryComponent := repository;
	var operationProvidedRoleLB : OperationProvidedRole := new OperationProvidedRole(operationProvidedRole);
	providedRoles_InterfaceProvidingEntity := operationProvidedRoleLB;
	var operationInterface : OperationInterface := operationProvidedRoleLB.providedInterface__OperationProvidedRole;
	var operationRequiredRole1 : OperationRequiredRole := new OperationRequiredRole(operationProvidedRole,1);
	var operationRequiredRole2 : OperationRequiredRole := new OperationRequiredRole(operationProvidedRole,2);
	var requiredRoles : Set(OperationRequiredRole) := Set{operationRequiredRole1, operationRequiredRole2};
	requiredRoles_InterfaceRequiringEntity := requiredRoles;
	operationInterface.signatures__OperationInterface->forEach(operationSignature){
	  serviceEffectSpecifications__BasicComponent += new ResourceDemandingSEFF(operationSignature, requiredRoles);
	};
}	

constructor ResourceDemandingSEFF :: ResourceDemandingSEFF (operationSignature : OperationSignature, requiredRoles : Set(OperationRequiredRole)){
log ('Start of LoadBalancer ServiceEffectSpecification Constructor');
	describedService__SEFF := operationSignature;
	var startAction : StartAction := object StartAction{};
	var branchAction : BranchAction := object BranchAction{
		entityName := "LoadBalancer Branch";
		predecessor_AbstractAction := startAction;
		
		requiredRoles->forEach(requiredRole){
		    var probability : Real := 1.0 / requiredRoles->size();
			branches_Branch += object ProbabilisticBranchTransition{
			    entityName := "Branch for "+requiredRole.entityName;
			    branchProbability := probability;
			    branchBehaviour_BranchTransition := object ResourceDemandingBehaviour{
			    	var innerStartAction : StartAction := object StartAction{};
			    	var externalCallAction : ExternalCallAction := object ExternalCallAction{
			    		predecessor_AbstractAction := innerStartAction;
			    		entityName := "Call "+operationSignature.entityName;
			    		role_ExternalService := requiredRole;
			    		calledService_ExternalService := operationSignature;
			    	};
			    	var innerStopAction : StopAction := object StopAction{
						predecessor_AbstractAction := externalCallAction;
					};
					
					steps_Behaviour += innerStartAction;
					steps_Behaviour += externalCallAction;
					steps_Behaviour += innerStopAction;
			    };
			};
		};
	};
	var stopAction : StopAction := object StopAction{
		predecessor_AbstractAction := branchAction;
	};
	steps_Behaviour += startAction;
	steps_Behaviour += branchAction;
	steps_Behaviour += stopAction;
}	

constructor OperationProvidedRole :: OperationProvidedRole(pr:OperationProvidedRole){
log ('Start of ProvidedRole Constructor');
	//id := pr.id +"_LoadBalancer";
	entityName := "Provided_" + pr.providedInterface__OperationProvidedRole.entityName + "_LoadBalancer";
	providedInterface__OperationProvidedRole := pr.providedInterface__OperationProvidedRole;
}

constructor OperationRequiredRole :: OperationRequiredRole(rr:OperationProvidedRole, i:Integer){
log ('Start of RequiredRole Constructor');
	//id := rr.id +"_LoadBalancer_"+i.toString();
	entityName := "Required_" + rr.providedInterface__OperationProvidedRole.entityName +"_LoadBalancer_"+i.toString();
	requiredInterface__OperationRequiredRole := rr.providedInterface__OperationProvidedRole;
}

constructor AssemblyContext :: AssemblyContext(bc : BasicComponent){
	//id := bc.id + "_" + bc.entityName + "_AssemblyContext";
	entityName := "Assembly_"+bc.entityName;
	encapsulatedComponent__AssemblyContext := bc;
	var allocation : Allocation := pcmAllocation.rootObjects()![Allocation];
	var system : System := allocation.system_Allocation![System];
	parentStructure__AssemblyContext := system;
}

constructor AllocationContext :: AllocationContext (ac : AssemblyContext, rc: ResourceContainer){
	var allocation : Allocation := pcmAllocation.rootObjects()![Allocation];
	//id := ac.id + "_" + ac.entityName +  "_AllocationContext";
	entityName := "Allocation_" + ac.entityName;
	assemblyContext_AllocationContext := ac;
	resourceContainer_AllocationContext := rc;
	allocation_AllocationContext := allocation;
}


constructor ResourceContainer :: ResourceContainer(originalResourceContainer : ResourceContainer){
	log ('Start of createLoadBalancerResourceContainer Method');
	//id := originalResourceContainer.id +"_LoadBalancer";
	entityName := originalResourceContainer.entityName + "_LoadBalancer";
	resourceEnvironment_ResourceContainer := originalResourceContainer.resourceEnvironment_ResourceContainer;	
} 


/**
 * Returns the requiring component of a given connector.
 */
query getRequiringAssemblyContext(assemblyConnector : AssemblyConnector) : AssemblyContext {
	return assemblyConnector.requiringAssemblyContext_AssemblyConnector;
}

/**
 * Returns the providing component of a given connector.
 */
query getProvidingAssemblyContext(assemblyConnector : AssemblyConnector) : AssemblyContext {
	return assemblyConnector.providingAssemblyContext_AssemblyConnector;
}

/**
 * Returns the providing component of a given connector.
 */
query getProvidingAssemblyContext(providedDelegationConnector : ProvidedDelegationConnector) : AssemblyContext {
	return providedDelegationConnector.assemblyContext_ProvidedDelegationConnector;
}

/**
 * Returns the AllocationContext the RepositoryComponent corresponds to.
 */
query findAllocationContext(repositoryComponent : RepositoryComponent) : AllocationContext {
	var acs : Bag(AllocationContext) := pcmAllocation.rootObjects().subobjects()[AllocationContext];
	return acs->selectOne(
		ac : AllocationContext | 
		ac.assemblyContext_AllocationContext.encapsulatedComponent__AssemblyContext.id = repositoryComponent.id
		);
}

/**
 * Returns the ResourceContainer the AllocationContext corresponds to.
 */
query findResourceContainer(assemblyContext : AssemblyContext) : ResourceContainer {
	var acs : Bag(AllocationContext) := pcmAllocation.rootObjects().subobjects()[AllocationContext];
	return acs->selectOne(
		ac : AllocationContext | 
		ac.assemblyContext_AllocationContext.id = assemblyContext.id
		).resourceContainer_AllocationContext;
}

/**
 * Returns whether the given sequence of resource conatiners is already load-balanced.
 */
query getLoadBalancedResourceContainers(resourceContainers : Sequence(ResourceContainer)) : ResourceContainer {
	return resourceContainers
				->selectOne(
					resourceContainer : ResourceContainer |
					resourceContainer.id.endsWith("_LoadBalancer")
				);
}

helper getLoadBalancerResourceContainer(originalResourceContainer:ResourceContainer):ResourceContainer{
	var resolvedResourceContainers : Sequence(ResourceContainer) := originalResourceContainer.resolve(ResourceContainer);
	var loadBalancerResourceContainer : ResourceContainer := getLoadBalancedResourceContainers(resolvedResourceContainers);
	
	if (loadBalancerResourceContainer = null) {
		log ('Start of loadbalancer resource container creation');
		loadBalancerResourceContainer := new ResourceContainer(originalResourceContainer);
		var resourceContainerLinkingResources :=
			originalResourceContainer.resourceEnvironment_ResourceContainer.linkingResources__ResourceEnvironment 
			-> select( l :LinkingResource |
				l.connectedResourceContainers_LinkingResource
				->includes(originalResourceContainer)
			);
			
		resourceContainerLinkingResources
			->forEach(linkingResource){
				linkingResource.connectedResourceContainers_LinkingResource += loadBalancerResourceContainer;
			};
	};
		
	return loadBalancerResourceContainer;
};

helper addRequiredRolesAssemblyConnectors(targetAssemblyContext : AssemblyContext,duplicatedAssemblyContext : AssemblyContext){
	var allocation : Allocation := pcmAllocation.rootObjects()![Allocation];
	var system : System := allocation.system_Allocation![System];
	var assemblyConnectors : Collection(AssemblyConnector) := system.connectors__ComposedStructure ->selectByType(AssemblyConnector);
	var targetRequiredRoles : Set(RequiredRole) := targetAssemblyContext.encapsulatedComponent__AssemblyContext.requiredRoles_InterfaceRequiringEntity;
	var requiredRoleTargetAssemblyContextConnectors : Collection(AssemblyConnector) := assemblyConnectors -> select(assemblyConnector : AssemblyConnector | targetRequiredRoles -> includes(assemblyConnector.requiredRole_AssemblyConnector));
	requiredRoleTargetAssemblyContextConnectors -> forEach(assemblyConnector){
		new AssemblyConnector(duplicatedAssemblyContext,assemblyConnector.requiredRole_AssemblyConnector,assemblyConnector.providedRole_AssemblyConnector,assemblyConnector.providingAssemblyContext_AssemblyConnector);
	};
};

helper addRequiredRolesSystemDelegationConnectors(targetAssemblyContext : AssemblyContext, duplicatedAssemblyContext : AssemblyContext){
	var allocation : Allocation := pcmAllocation.rootObjects()![Allocation];
	var system : System := allocation.system_Allocation![System];
	var delegationConnectors : Collection(RequiredDelegationConnector) := system.connectors__ComposedStructure -> selectByType(RequiredDelegationConnector);
	var targetRequiredRoles : Set(RequiredRole) := targetAssemblyContext.encapsulatedComponent__AssemblyContext.requiredRoles_InterfaceRequiringEntity;
	var requiredRoleTargetAssemblyContextDelegationConnectors : Collection(RequiredDelegationConnector) := delegationConnectors -> select(delegationConnector : RequiredDelegationConnector | targetRequiredRoles -> includes(delegationConnector.innerRequiredRole_RequiredDelegationConnector));
	requiredRoleTargetAssemblyContextDelegationConnectors -> forEach(delegationConnector){
		new RequiredDelegationConnector(duplicatedAssemblyContext,delegationConnector.innerRequiredRole_RequiredDelegationConnector,delegationConnector.outerRequiredRole_RequiredDelegationConnector);
	};
};
