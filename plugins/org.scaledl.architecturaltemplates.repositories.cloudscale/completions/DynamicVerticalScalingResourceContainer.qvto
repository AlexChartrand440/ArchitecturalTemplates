import org.scaledl.architecturaltemplates.repositories.cloudscale.black.ProfilesLibrary;
import org.scaledl.architecturaltemplates.repositories.cloudscale.black.ThreeLayerLibrary;


modeltype PCM_ALLOC uses 'http://sdq.ipd.uka.de/PalladioComponentModel/Allocation/5.0';
modeltype PCM_REP uses 'http://sdq.ipd.uka.de/PalladioComponentModel/Repository/5.0';
modeltype PCM_SYS uses 'http://sdq.ipd.uka.de/PalladioComponentModel/System/5.0';
modeltype PCM_USE uses 'http://sdq.ipd.uka.de/PalladioComponentModel/UsageModel/5.0';
modeltype PCM_RES_ENV uses 'http://sdq.ipd.uka.de/PalladioComponentModel/ResourceEnvironment/5.0';
modeltype PCM_CORE uses 'http://sdq.ipd.uka.de/PalladioComponentModel/Core/5.0';
modeltype EMF_PROFILE_APPLICATION uses 'http://www.modelversioning.org/emfprofile/application/1.1';
modeltype EMF_PROFILE uses 'http://www.modelversioning.org/emfprofile/1.1';
modeltype PCM_RES_TYPE uses 'http://sdq.ipd.uka.de/PalladioComponentModel/ResourceType/5.0';
modeltype PCMCore uses pcm::core('http://sdq.ipd.uka.de/PalladioComponentModel/5.0');
modeltype PCMEntity uses pcm::core::entity('http://sdq.ipd.uka.de/PalladioComponentModel/5.0');
modeltype PCMComposition uses pcm::core::composition('http://sdq.ipd.uka.de/PalladioComponentModel/5.0');
modeltype PCM_MEASURINGPOINT uses 'http://palladiosimulator.org/PCM/MeasuringPoint/1.0';
modeltype PCM_PMS uses 'http://simulizar.palladiosimulator.org/PalladioMonitoringSpecification/1.0';
modeltype PCM_EDP2MEASURINGPOINT uses 'http://palladiosimulator.org/EDP2/MeasuringPoint/0.9.1';

/**
 * Transforms a resource environment where resource containers are annotated with the
 * "Virtualized Resource Container" AT roles to a PCM instance where each such container
 * can be dynamically vertically scaled. By default, processing rates of all present
 * active resources are equally scaled up if needed (e.g., triggerd by an automated
 * scaling listener).
 *
 * Replication is based on upper and lower thresholds for scaling out and in, respectively.
 * Such thresholds related to average active resource utilization taken at the container
 * in intervals. Intervals and thresholds can externally be set via properties.
 *
 * TODO Quite simplistic direct mapping to Virtualized stereortypes, without further
 *      features. Should there be more?
 *
 * @see http://cloudscale.xlab.si/wiki/index.php/Dynamic_Vertical_Scaling_CAT
 * @see http://cloudpatterns.org/mechanisms/automated_scaling_listener
 *
 * @author Sebastian Lehrig
 **/
transformation DynamicHorizontalScalingResourceContainer(
                           inout pcmResourceEnvironment : PCM_RES_ENV);

main() {	
	log ('Architectural Template Transformation "Dynamic Vertical Scaling Resource Container" started');
	
	var resourceEnvironment : ResourceEnvironment := pcmResourceEnvironment.rootObjects()![ResourceEnvironment];		
	var resourceContainers : Set(ResourceContainer) := resourceEnvironment.resourceContainer_ResourceEnvironment;
	resourceContainers->forEach(resourceContainer) {
		if(hasAppliedStereotype(resourceContainer,"VirtualizedResourceContainer")){
			applyStereotype(resourceContainer, "Virtualized");
		};
	};
	
	log ('Architectural Template Transformation "Dynamic Vertical Scaling Resource Container" finished');
}

