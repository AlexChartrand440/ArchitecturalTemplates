import org.scaledl.architecturaltemplates.repositories.cloudscale.black.ProfilesLibrary;

modeltype ECORE uses 'http://www.eclipse.org/emf/2002/Ecore';
modeltype PCM_SYS uses 'http://palladiosimulator.org/PalladioComponentModel/System/5.1';
modeltype PCM_RES_ENV uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceEnvironment/5.1';
modeltype PCM_ALLOC uses 'http://palladiosimulator.org/PalladioComponentModel/Allocation/5.1';

/**
 * Transforms a resource environment where resource containers are annotated with the
 * "Virtualized Resource Container" AT roles to a PCM instance where each such container
 * can be dynamically vertically scaled. By default, processing rates of all present
 * active resources are equally scaled up if needed (e.g., triggerd by an automated
 * scaling listener).
 *
 * Replication is based on upper and lower thresholds for scaling out and in, respectively.
 * Such thresholds related to average active resource utilization taken at the container
 * in intervals. Intervals and thresholds can externally be set via properties.
 *
 * TODO Quite simplistic direct mapping to Virtualized stereortypes, without further
 *      features. Should there be more?
 *
 * @see http://cloudscale.xlab.si/wiki/index.php/Dynamic_Vertical_Scaling_CAT
 * @see http://cloudpatterns.org/mechanisms/automated_scaling_listener
 *
 * @author Sebastian Lehrig
 **/
transformation DynamicVerticalScalingResourceContainer(
                          inout pcmAllocation : PCM_ALLOC);
                          
//String constants of the Dynamic Vertical Scaling Resource Container Profile					   			 
property dynamicVerticalScalingResourceContainerProfile : String = "DynamicVerticalScalingResourceContainerProfile";
property dynamicVerticalScalingResourceContainerSystemStereotype : String = "DynamicVerticalScalingResourceContainerSystem";

main() {	
	log ('Architectural Template Transformation "Dynamic Vertical Scaling Resource Container" started');
	
	var allocation : Allocation := pcmAllocation.rootObjects()![Allocation];
	var system : System := allocation.system_Allocation;
	var resourceEnvironment : ResourceEnvironment := allocation.targetResourceEnvironment_Allocation;
	
	assert fatal(isProfileApplied(system.oclAsType(EObject),dynamicVerticalScalingResourceContainerProfile))
		with log ("The System has no " + dynamicVerticalScalingResourceContainerProfile + " applied.");
		
	assert fatal(isProfileApplied(resourceEnvironment.oclAsType(EObject), dynamicVerticalScalingResourceContainerProfile))
		with log ("The resource environment has no " + dynamicVerticalScalingResourceContainerProfile + " applied.");
		
	assert fatal(hasAppliedStereotype(system, dynamicVerticalScalingResourceContainerSystemStereotype))
		with log ("The system is not a " + dynamicVerticalScalingResourceContainerSystemStereotype + "!");
	
	log ('Architectural Template Transformation "Dynamic Vertical Scaling Resource Container" finished');
}

