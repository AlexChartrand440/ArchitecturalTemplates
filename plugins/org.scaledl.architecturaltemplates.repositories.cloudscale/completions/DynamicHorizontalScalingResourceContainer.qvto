import org.scaledl.architecturaltemplates.repositories.cloudscale.black.ProfilesLibrary;
import StaticResourceContainerLoadbalancing;

modeltype PCM_ALLOC uses 'http://sdq.ipd.uka.de/PalladioComponentModel/Allocation/5.0';
modeltype PCM_SYS uses 'http://sdq.ipd.uka.de/PalladioComponentModel/System/5.0';

/**
 * Transforms a resource environment where resource containers are annotated with the
 * "Replicable Resource Container" AT roles to a PCM instance where each such container
 * can be dynamically horizontal scaled. Each replicated container has all assembly context
 * allocated to itself as the original one. Furthermore, the replicated resource container
 * has the same specification as the original container.
 *
 * Replication is based on upper and lower thresholds for scaling out and in, respectively.
 * Such thresholds related to average active resource utilization taken at the container
 * in intervals. Intervals and thresholds can externally be set via properties.
 *
 * TODO How can properties be externally set?
 *
 * @see http://cloudscale.xlab.si/wiki/index.php/Dynamic_Horizontal_Scaling_CAT
 *
 * @author Sebastian Lehrig
 **/
transformation DynamicHorizontalScalingResourceContainer(inout pcmAllocation : PCM_ALLOC) 
	access transformation StaticResourceContainerLoadbalancing;
						   
main() {	
	log ('Architectural Template Transformation "Dynamic Horizontal Scaling Resource Container" started');
	// Get relevant PCM model elements
	var allocation : Allocation := pcmAllocation.rootObjects()![Allocation];
	var system : System := allocation.system_Allocation;
	//assert fatal(hasAppliedStereotype(system, "DynamicHorizontalScalingResourceContainerSystem"))
		//with log ("The system is not a dynamic horizontal scaling resource container system!");
	new StaticResourceContainerLoadbalancing(pcmAllocation)->transform();
	
	log ('Architectural Template Transformation "Dynamic Horizontal Scaling Resource Container" finished');
}
