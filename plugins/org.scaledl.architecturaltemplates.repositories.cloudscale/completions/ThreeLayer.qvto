import org.scaledl.architecturaltemplates.repositories.cloudscale.black.ProfilesLibrary;

modeltype ECORE uses 'http://www.eclipse.org/emf/2002/Ecore';
modeltype PCM_ALLOC uses 'http://palladiosimulator.org/PalladioComponentModel/Allocation/5.0';
modeltype PCM_SYS uses 'http://palladiosimulator.org/PalladioComponentModel/System/5.0';
modeltype PCM_USE uses 'http://palladiosimulator.org/PalladioComponentModel/UsageModel/5.0';
modeltype PCM_RES_ENV uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceEnvironment/5.0';
modeltype PCMComposition uses pcm::core::composition('http://palladiosimulator.org/PalladioComponentModel/5.0');

/**
 * Transforms a 3-layer PCM instance (System annotated with 3-layer AT roles) to a PCM instance
 * fitting to a given 3-tier resource environment. Each layer is assigned to the corresponding
 * tier in the resulting Allocation.
 *
 * @author Sebastian Lehrig
 * @author Daria Giacinto
 **/
transformation ThreeLayer( inout pcmSystem : PCM_SYS,
						   inout pcmResourceEnvironment : PCM_RES_ENV,
						   inout pcmUsage: PCM_USE,
						   out pcmAllocation : PCM_ALLOC);
						   

property threshold : Real;
property interval : Real;

main() {	
	log ('Architectural Template Transformation "ThreeLayer" started!');
	
	var system : System := pcmSystem.rootObjects()![System];
	var usageModel : UsageModel := pcmUsage.rootObjects()![UsageModel];
	var usageScenario : UsageScenario := usageModel.usageScenario_UsageModel![UsageScenario];
	assert fatal(hasAppliedStereotype(system,"ThreeLayerSystem"))
		with log ("The system is not a three layer system!");
	var assemblyContexts : Set(AssemblyContext) := system.assemblyContexts__ComposedStructure;	

	var resourceEnvironment : ResourceEnvironment := pcmResourceEnvironment.rootObjects()![ResourceEnvironment];
	var resourceContainers : Set(ResourceContainer) := resourceEnvironment.resourceContainer_ResourceEnvironment;	
	
	var allocation : Allocation := system.map createAllocation(resourceEnvironment);
	allocateAssemblyContextsToResourceContainer(assemblyContexts,resourceContainers,allocation);
	
	log ('Architectural Template Transformation "ThreeLayer" finished!');
}

helper allocateAssemblyContextsToResourceContainer(assemblyContexts : Set(AssemblyContext), resourceContainers : Set(ResourceContainer), allocation : Allocation) {
	assemblyContexts -> forEach(assemblyContext){
		var resourceContainer : ResourceContainer;
		if(hasAppliedStereotype(assemblyContext,"PresentationLayerAssembly")){
			resourceContainer := resourceContainers -> any(rc|rc.id = "_ETFqQCPIEeSwPfc4EJw-WA");
		}
		else if(hasAppliedStereotype(assemblyContext,"MiddleLayerAssembly")){
			resourceContainer := resourceContainers -> any(rc|rc.id = "_Fg46ICPIEeSwPfc4EJw-WA");
			if (not isProfileApplied(resourceContainer.oclAsType(EObject), "DynamicHorizontalScalingResourceContainerProfile")) {
				applyProfile(resourceContainer.oclAsType(EObject), "DynamicHorizontalScalingResourceContainerProfile");
			};
			applyStereotype(resourceContainer,"ReplicableResourceContainer");
			threshold := getDoubleTaggedValue(assemblyContext,"responseTimeThreshold","MiddleLayerAssembly");
			interval := getDoubleTaggedValue(assemblyContext,"responseTimeInterval","MiddleLayerAssembly");
		}
		else if(hasAppliedStereotype(assemblyContext,"DataLayerAssembly")){
			resourceContainer := resourceContainers -> any(rc|rc.id = "_HAQbICPIEeSwPfc4EJw-WA");
		};
		new AllocationContext(assemblyContext, resourceContainer, allocation);
	}
};

mapping System::createAllocation(resourceEnvironment:ResourceEnvironment) : Allocation@pcmAllocation{
	id := self.id + "_ThreeLayerAllocation";
	entityName := "ThreeLayerAllocation";
	system_Allocation := self;
	targetResourceEnvironment_Allocation := resourceEnvironment;
}

constructor AllocationContext :: AllocationContext (ac : AssemblyContext, rc: ResourceContainer, allocation : Allocation){
	id := ac.id + "_" + ac.entityName +  "_AllocationContext";
	entityName := "Allocation_" + ac.entityName;
	assemblyContext_AllocationContext := ac;
	resourceContainer_AllocationContext := rc;
	allocation_AllocationContext := allocation;
}
