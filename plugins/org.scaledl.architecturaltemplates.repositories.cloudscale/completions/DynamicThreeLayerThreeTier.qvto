import org.scaledl.architecturaltemplates.repositories.cloudscale.black.ProfilesLibrary;
import StaticResourceContainerLoadbalancing;

modeltype ECORE uses 'http://www.eclipse.org/emf/2002/Ecore';
modeltype PCM_ALLOC uses 'http://palladiosimulator.org/PalladioComponentModel/Allocation/5.1';
modeltype PCM_SYS uses 'http://palladiosimulator.org/PalladioComponentModel/System/5.1';
modeltype PCM_USE uses 'http://palladiosimulator.org/PalladioComponentModel/UsageModel/5.1';
modeltype PCM_RES_ENV uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceEnvironment/5.1';
modeltype PCMComposition uses pcm::core::composition('http://palladiosimulator.org/PalladioComponentModel/5.1');

/**
 * Transforms a 3-layer PCM instance (System and Resource Container annotated with Dynamic 3-layer 3-tier AT roles) 
 * to a PCM instance that is a DynamicHorizontalScalingResourceContainerSystem. 
 * Moreover, the middle tier resource container is loadbalanced and 
 * replicated by the defined number of replicas. 
 *
 *
 * @author Daria Giacinto
 **/
transformation DynamicThreeLayerThreeTier(inout pcmAllocation : PCM_ALLOC) 
						   			 access transformation StaticResourceContainerLoadbalancing;
property scaleInThreshold : Real;	
property scaleOutThreshold : Real;
property numberOfMiddleTierReplicas : Integer;		
	   
main() {	
	log ('Architectural Template Transformation "Dynamic Three Layer Three Tier" started!');
	var allocation : Allocation := pcmAllocation.rootObjects()![Allocation];
	var system : System := allocation.system_Allocation;
	
	assert fatal(hasAppliedStereotype(system,"DynamicThreeLayerThreeTierSystem"))
		with log ("The system is not a DynamicThreeLayerThreeTierSystem");
		
	scaleInThreshold  := getDoubleTaggedValue(system, "scaleInThreshold", "DynamicThreeLayerThreeTierSystem");
	scaleOutThreshold  := getDoubleTaggedValue(system, "scaleOutThreshold","DynamicThreeLayerThreeTierSystem");
	numberOfMiddleTierReplicas := getIntTaggedValue(system, "numberOfMiddleTierReplicas", "DynamicThreeLayerThreeTierSystem");
		
	var resourceEnvironment : ResourceEnvironment := allocation.targetResourceEnvironment_Allocation;
	var middleLayerAllocationContext : AllocationContext := allocation.allocationContexts_Allocation ->selectOne(allocationContext| hasAppliedStereotype(allocationContext.assemblyContext_AllocationContext,"MiddleLayerAssembly"));
	var middleTierResourceContainer : ResourceContainer := middleLayerAllocationContext.resourceContainer_AllocationContext;
	convertMiddleTierIntoReplicableResourceContainer(middleTierResourceContainer,system);
	new StaticResourceContainerLoadbalancing(pcmAllocation)->transform();
	
	log ('Architectural Template Transformation "Dynamic Three Layer Three Tier" finished!');
}



helper convertMiddleTierIntoReplicableResourceContainer(middleTier : ResourceContainer, system : System){
	applyProfile(system.oclAsType(EObject), "DynamicHorizontalScalingResourceContainerProfile");
	applyStereotype(system, "DynamicHorizontalScalingResourceContainerSystem");
	applyProfile(middleTier.oclAsType(EObject), "DynamicHorizontalScalingResourceContainerProfile");
	applyStereotype(middleTier, "ReplicableResourceContainer");
	setReplicableResourceContainerTaggedValues(middleTier, system);
};

helper setReplicableResourceContainerTaggedValues(middleTier : ResourceContainer, system : System){
 	setTaggedValue(middleTier, numberOfMiddleTierReplicas, "ReplicableResourceContainer", "numberOfReplicas");
 	setDoubleTaggedValue(middleTier, scaleInThreshold, "ReplicableResourceContainer", "scaleInThreshold");
 	setDoubleTaggedValue(middleTier, scaleOutThreshold, "ReplicableResourceContainer", "scaleOutThreshold");
}
