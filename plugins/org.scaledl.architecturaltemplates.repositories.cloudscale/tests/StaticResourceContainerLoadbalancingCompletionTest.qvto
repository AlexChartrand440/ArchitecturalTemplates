import org.scaledl.architecturaltemplates.repositories.cloudscale.black.ProfilesLibrary;

modeltype PCM_ALLOC uses 'http://palladiosimulator.org/PalladioComponentModel/Allocation/5.1';
modeltype PCM_REP uses 'http://palladiosimulator.org/PalladioComponentModel/Repository/5.1';
modeltype PCM_SYS uses 'http://palladiosimulator.org/PalladioComponentModel/System/5.1';
modeltype PCM_RES_ENV uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceEnvironment/5.1';
modeltype PCM_CORE uses 'http://palladiosimulator.org/PalladioComponentModel/Core/5.1';
modeltype PCMComposition uses pcm::core::composition('http://palladiosimulator.org/PalladioComponentModel/5.1');
modeltype PCMSEFF uses pcm::seff('http://palladiosimulator.org/PalladioComponentModel/SEFF/5.1');
modeltype PCM_COMPLETION uses 'http://palladiosimulator.org/AnalyzerFramework/Completions/1.0';

transformation StaticResourceContainerLoadbalancingCompletionTest(inout allocationBeforeCompletion : PCM_ALLOC, inout allocationAfterCompletion : PCM_ALLOC);

property oldResEnvironment : ResourceEnvironment;
property newResEnvironment : ResourceEnvironment;

main() {
	log('Test started');
	
		var oldAllocation : Allocation := allocationBeforeCompletion.rootObjects()![Allocation];
		var newAllocation : Allocation := allocationAfterCompletion.rootObjects()![Allocation];
		var oldSystem : System := oldAllocation.system_Allocation;
		var newSystem : System := newAllocation.system_Allocation;
		oldResEnvironment := oldAllocation.targetResourceEnvironment_Allocation;
		newResEnvironment := newAllocation.targetResourceEnvironment_Allocation;
		
		testOriginalAndDuplicateResourceContainerEqualsNumberOfReplicas();
		testNumberOfLoadbalancerResourceContainer(oldSystem,oldAllocation);
		testNumberOfNewResourceContainer(oldSystem);
		testDuplicateResourceContainerConnectedWithOriginalLinkingResource();
		testLoadbalancerResourceContainerConnectedWithOriginalLinkingResource();
		testNewResContainerSpecificationsEqualReplicableResContainer();
		
	log('Test finished');
}

/**
* Tests whether the original and duplicates number of resource container equals the predefined number of replicas
**/
query testOriginalAndDuplicateResourceContainerEqualsNumberOfReplicas(){
	var replicableResourceContainer : ResourceContainer := getStereotypedResourceContainerBeforeCompletion("ReplicableResourceContainer");
	var numberOfReplicas : Integer := getIntTaggedValue(replicableResourceContainer,"numberOfReplicas","ReplicableResourceContainer");
	var duplicateResourceContainer : Set(ResourceContainer) := getStereotypedResourceContainersAferCompletion("DuplicateResourceContainer");
	var stereotypedResContainerSize : Integer := duplicateResourceContainer->size() + 1;
	assert error (stereotypedResContainerSize = numberOfReplicas) 
		with log('The number of the replicable resource container and its duplicates('+stereotypedResContainerSize.toString()+') 
					does not equal the expected number of replicas('+numberOfReplicas.toString()+')');
}

/**
* Tests whether the loadbalancers number of resource container equals the number of assemblies that has to be loadbalanced, i.e.,
* all assemblies that are target of connectors required from assemblies on another resource container
**/
query testNumberOfLoadbalancerResourceContainer(oldSystem : System, oldAllocation : Allocation){
	var loadbalancerResContainers : Set(ResourceContainer) := getStereotypedResourceContainersAferCompletion("LoadbalancerResourceContainer");
	var loadbalancerResContainersSize : Integer := loadbalancerResContainers->size();
	var replicableConnectors : Set(Connector) := getAllConnectorsToReplicableAssemblies(oldSystem);
	var replicableConnectorsSize : Integer := replicableConnectors->size();
	assert error (replicableConnectorsSize = loadbalancerResContainersSize) 
		with log('The number of the loadbalancer resource container ('+loadbalancerResContainersSize.toString()+') 
					does not equal the expected number of assemblies that should be loadbalanced('+replicableConnectorsSize.toString()+')');
}

/**
* Tests whether the resource container of the loadbalancers and duplicates are newly created and conforms to the expected number 
**/
query testNumberOfNewResourceContainer(oldSystem:System){
	var oldResContainer : Set(ResourceContainer) := getOldResourceContainer();
	var newResContainer : Set(ResourceContainer) := getNewResourceContainer();
	var newlyCreatedResourceContainer : Set(ResourceContainer) := newResContainer->select(resourceContainer : ResourceContainer | oldResContainer.id->excludes(resourceContainer.id));
	var newlyCreatedResContainerSize : Integer := newlyCreatedResourceContainer->size();
	var replicableConnectors : Set(Connector) := getAllConnectorsToReplicableAssemblies(oldSystem);
	var replicableConnectorsSize : Integer := replicableConnectors->size();
	var replicableResourceContainer : ResourceContainer := getStereotypedResourceContainerBeforeCompletion("ReplicableResourceContainer");
	var numberOfReplicas : Integer := getIntTaggedValue(replicableResourceContainer,"numberOfReplicas","ReplicableResourceContainer");
	var expectedNewResContainer : Integer := replicableConnectorsSize + numberOfReplicas -1;
	assert error (expectedNewResContainer = newlyCreatedResContainerSize) 
		with log('The number of newly created resource container ('+newlyCreatedResContainerSize.toString()+') 
					does not equal the expected number of newly created resource container ('+expectedNewResContainer.toString()+')');
}

/**
* Tests whether the resource container of the duplicates are connected with the same linking resources as the original resource container
**/
query testDuplicateResourceContainerConnectedWithOriginalLinkingResource(){
	var originalResourceContainer : ResourceContainer := getStereotypedResourceContainerAfterCompletion("OriginalResourceContainer");
	var originalLinkingResources : Set(LinkingResource) := getLinkingResourcesFromResourceContainerAfterCompletion(originalResourceContainer);
	var duplicateResourceContainer : Set(ResourceContainer) := getStereotypedResourceContainersAferCompletion("DuplicateResourceContainer");	
	var notConnectedResContainer : Set(ResourceContainer);
	var originalLinkingResourceContainer : Set(ResourceContainer);
	originalLinkingResources->forEach(linkingResource){
		originalLinkingResourceContainer := linkingResource.connectedResourceContainers_LinkingResource;
		notConnectedResContainer := duplicateResourceContainer->select(duplicateResContainer : ResourceContainer| originalLinkingResourceContainer->excludes(duplicateResContainer));
		var delim : String := "";
		assert error(notConnectedResContainer->isEmpty())
			with log('The duplicate resource container ['+notConnectedResContainer->forEach(resContainer){delim+resContainer.id; delim :=";";}
					+'] are not connected with the replicable linking resource '+linkingResource.id);
	};
}

/**
* Tests whether the resource container of the loadbalancers are connected with the same linking resources as the original resource container
**/
query testLoadbalancerResourceContainerConnectedWithOriginalLinkingResource(){
	var loadbalancerResourceContainer : ResourceContainer:= getStereotypedResourceContainerAfterCompletion("LoadbalancerResourceContainer");
	var originalResourceContainer : ResourceContainer := getStereotypedResourceContainerAfterCompletion("OriginalResourceContainer");
	var originalLinkingResources : Set(LinkingResource) := getLinkingResourcesFromResourceContainerAfterCompletion(originalResourceContainer);
	var notConnectedResContainer : Set(ResourceContainer);
	var originalLinkingResourceContainer : Set(ResourceContainer);
	originalLinkingResources->forEach(linkingResource){
		originalLinkingResourceContainer := linkingResource.connectedResourceContainers_LinkingResource;
		notConnectedResContainer := loadbalancerResourceContainer->select(loadbalancerResContainer : ResourceContainer| originalLinkingResourceContainer->excludes(loadbalancerResContainer));
		var delim : String := "";
		assert error(notConnectedResContainer->isEmpty())
			with log('The loadbalancer resource container ['+notConnectedResContainer->forEach(resContainer){delim+resContainer.id; delim :=";";}
					+'] are not connected with the replicable linking resource '+linkingResource.id);
	};
}

/**
* Tests whether the newly created resource container specifications conforms to the original resource container specifications
**/
query testNewResContainerSpecificationsEqualReplicableResContainer(){
	var originalResourceContainer : ResourceContainer := getStereotypedResourceContainerAfterCompletion("OriginalResourceContainer");
	var originalResourceContainerSpecifications : Set(ProcessingResourceSpecification) := originalResourceContainer.activeResourceSpecifications_ResourceContainer;
	var newResourceContainer : Set(ResourceContainer) := getNewResourceContainer();
	var oldResourceContainer : Set(ResourceContainer) := getOldResourceContainer();
	var newlyCreatedResourceContainer : Set(ResourceContainer) := newResourceContainer->select(resourceContainer : ResourceContainer | oldResourceContainer.id->excludes(resourceContainer.id));
	var newlyCreatedResContainerSpecifications : Set(ProcessingResourceSpecification);
	newlyCreatedResourceContainer->forEach(newlyCreatedResContainer){
		newlyCreatedResContainerSpecifications := newlyCreatedResContainer.activeResourceSpecifications_ResourceContainer;
		assert error(newlyCreatedResContainerSpecifications.MTTR = originalResourceContainerSpecifications.MTTR)
			with log('The MTTR of the newly created resource container '+ newlyCreatedResContainer.id + ' does not conform to the expected value of the original resource container ' +originalResourceContainer.id);
		assert error(newlyCreatedResContainerSpecifications.MTTF = originalResourceContainerSpecifications.MTTF)
			with log('The MTTF of the newly created resource container '+ newlyCreatedResContainer.id + ' does not conform to the expected value of the original resource container ' +originalResourceContainer.id);
		assert error(newlyCreatedResContainerSpecifications.schedulingPolicy = originalResourceContainerSpecifications.schedulingPolicy)
			with log('The scheduling policy of the newly created resource container '+ newlyCreatedResContainer.id + ' does not conform to the expected value of the original resource container ' +originalResourceContainer.id);
		assert error(newlyCreatedResContainerSpecifications.activeResourceType_ActiveResourceSpecification = originalResourceContainerSpecifications.activeResourceType_ActiveResourceSpecification)
			with log('The active resource type of the newly created resource container '+ newlyCreatedResContainer.id + ' does not conform to the expected value of the original resource container ' +originalResourceContainer.id);
		assert error(newlyCreatedResContainerSpecifications.processingRate_ProcessingResourceSpecification.specification = originalResourceContainerSpecifications.processingRate_ProcessingResourceSpecification.specification)
			with log('The processing rate of the newly created resource container '+ newlyCreatedResContainer.id + ' does not conform to the expected value of the original resource container ' +originalResourceContainer.id);
		assert error(newlyCreatedResContainerSpecifications.numberOfReplicas = originalResourceContainerSpecifications.numberOfReplicas)
			with log('The number of replicas of the newly created resource container '+ newlyCreatedResContainer.id + ' does not conform to the expected value of the original resource container ' +originalResourceContainer.id);
	};
}


query testForEachLoadbalancedAssemblyLoadbalancerExists(newAllocation : Allocation, oldSystem : System){
 var newSystem : System := newAllocation.system_Allocation;
 var newAssemblyConnectors : Bag(AssemblyConnector) := newSystem.connectors__ComposedStructure->select(connector : Connector| connector.oclIsTypeOf(AssemblyConnector)).oclAsType(AssemblyConnector);
 var loadbalancerResourceContainer : Set(ResourceContainer) := getStereotypedResourceContainersAferCompletion("LoadbalancerResourceContainer");
 var allLoadbalancerAssemblyContexts : Bag(AssemblyContext) := getAssemblyContextsFromResourceContainer(loadbalancerResourceContainer, newAllocation);
 
 var connectorsToReplicableAssemblies : Set(Connector) := getAllConnectorsToReplicableAssemblies(oldSystem);
 var replicableAssemblies : Set(AssemblyContext) := getAllReplicableAssemblies(connectorsToReplicableAssemblies);
 
 replicableAssemblies->forEach(replicableAssembly){
 	assert error(hasAppliedStereotype(replicableAssembly,"OriginalAssemblyContext"))
			with log('The assembly context '+ replicableAssembly.id + 
				' has not applied the OriginalAssemblyContext Stereotype. Hence, it was not loadbalanced.');
	if(hasAppliedStereotype(replicableAssembly,"OriginalAssemblyContext")){
		var loadbalancerAssemblyContextID : String := getStringTaggedValue(replicableAssembly,"loadbalancerAssemblyContext","OriginalAssemblyContext");
		var loadbalancerAssemblyContext : Bag(AssemblyContext) := allLoadbalancerAssemblyContexts->select(assembly : AssemblyContext | assembly.id = loadbalancerAssemblyContextID);
		var loadbalancerSize : Integer := loadbalancerAssemblyContext->size();
		assert error(loadbalancerSize = 1)
			with log('The assembly context '+ replicableAssembly.id + 
				' has not exactly one loadbalancer. Instead it has '+ loadbalancerSize.toString());
		if(loadbalancerSize = 1){
			var loadbalancerAssembly : AssemblyContext := loadbalancerAssemblyContext->any(true);
			testLoadbalancerProvidedRoles(loadbalancerAssembly,replicableAssembly);
			testLoadbalancerRequiredRoles(loadbalancerAssembly);
			testLoadbalancersSEFF(loadbalancerAssembly);
			testLoadbalancerIsConnectedWithReplicableAssembly(loadbalancerAssembly,replicableAssembly);
		};
	};
 };
}

query testForEachLoadbalancedAssemblyDuplicateExists(oldSystem : System, newAllocation : Allocation){
	var connectorsToReplicableAssemblies : Set(Connector) := getAllConnectorsToReplicableAssemblies(oldSystem);
	var replicableAssemblies : Set(AssemblyContext) := getAllReplicableAssemblies(connectorsToReplicableAssemblies);
	var replicableResourceContainer : ResourceContainer := getStereotypedResourceContainerBeforeCompletion("ReplicableResourceContainer");
	var expectedNumberOfDuplicates : Integer := getIntTaggedValue(replicableResourceContainer,"numberOfReplicas","ReplicableResourceContainer")-1;
	var newSystem : System := newAllocation.system_Allocation;
	var allDuplicateAssemblies : Set(AssemblyContext) :=  newSystem.assemblyContexts__ComposedStructure->select(assembly : AssemblyContext | hasAppliedStereotype(assembly, "DuplicateAssemblyContext"));
	var duplicateAssemblies : Set(AssemblyContext);
	var duplicateAssembliesSize : Integer;
	replicableAssemblies->forEach(replicableAssembly){
		duplicateAssemblies := allDuplicateAssemblies->select(assembly : AssemblyContext | getStringTaggedValue(assembly,"originalAssemblyContext","DuplicateAssemblyContext")= replicableAssembly.id);
		duplicateAssembliesSize := duplicateAssemblies->size();
		assert error(duplicateAssembliesSize = expectedNumberOfDuplicates)
			with log('The number of of duplicates of the replicable assembly context '+ replicableAssembly.id + 
				' is ' +duplicateAssembliesSize.toString()+ ' instead of '+ expectedNumberOfDuplicates.toString());
		testDuplicateAssembliesContainReplicableRepositoryComponent(replicableAssembly,duplicateAssemblies);
		testEachLoadbalancerIsConnectedWithDuplicates(replicableAssembly,duplicateAssemblies,newSystem);
	};	
}

query testDuplicateAssembliesContainReplicableRepositoryComponent(replicableAssemblyContext : AssemblyContext, duplicateAssemblies : Set(AssemblyContext)){
	duplicateAssemblies->forEach(duplicateAssembly){
	assert error(duplicateAssembly.encapsulatedComponent__AssemblyContext.id = replicableAssemblyContext.encapsulatedComponent__AssemblyContext.id)
			with log('The duplicate of the replicable assembly context '+ duplicateAssembly.id + 
				' does not encapsulate the repository component ' +replicableAssemblyContext.encapsulatedComponent__AssemblyContext.id + ' of the replicable assembly context '+ replicableAssemblyContext.id);		
	};
}

query testEachLoadbalancerIsConnectedWithDuplicates(replicableAssembly : AssemblyContext, duplicateAssemblies : Set(AssemblyContext), newSystem : System){
	var loadbalancerAssemblyContextID : String := getStringTaggedValue(replicableAssembly,"loadbalancerAssemblyContext","OriginalAssemblyContext"); 
	var loadbalancerAssemblyContext : AssemblyContext := newSystem.assemblyContexts__ComposedStructure->selectOne(assembly : AssemblyContext| assembly.id = loadbalancerAssemblyContextID);
	var replicableProvidedRoles : Integer := replicableAssembly.encapsulatedComponent__AssemblyContext.providedRoles_InterfaceProvidingEntity->size();
	var assemblyConnectors : Set(AssemblyConnector) := newSystem.connectors__ComposedStructure->selectByType(AssemblyConnector);
	var loadbalancerDuplicateConnectors : Set(AssemblyConnector);
	var loadbalancerDuplicateConnectorSize : Integer;
	duplicateAssemblies->forEach(duplicateAssembly){
		loadbalancerDuplicateConnectors := assemblyConnectors->select(assemblyConnector : AssemblyConnector| 
																assemblyConnector.providingAssemblyContext_AssemblyConnector.id = duplicateAssembly.id and loadbalancerAssemblyContext.id = assemblyConnector.requiringAssemblyContext_AssemblyConnector.id);	
		loadbalancerDuplicateConnectorSize := loadbalancerDuplicateConnectors ->size();
		assert error(loadbalancerDuplicateConnectorSize = replicableProvidedRoles)
			with log('The number of connectors between the loadbalancer assembly'+ loadbalancerAssemblyContext.id + 
				' and the replicable assembly ' +replicableAssembly.id+ ' is '+loadbalancerDuplicateConnectorSize.toString()+' instead of '+ replicableProvidedRoles.toString());
	
	};
}

query testLoadbalancerIsConnectedWithReplicableAssembly(loadbalancerAssembly : AssemblyContext,replicableAssembly : AssemblyContext){ 

	var assemblyConnectors : Set(AssemblyConnector) := replicableAssembly.parentStructure__AssemblyContext.connectors__ComposedStructure->selectByType(AssemblyConnector);
	var loadbalancerReplicableConnectors : Set(AssemblyConnector) := assemblyConnectors->select(assemblyConnector : AssemblyConnector| 
																assemblyConnector.providingAssemblyContext_AssemblyConnector.id = replicableAssembly.id and loadbalancerAssembly.id = assemblyConnector.requiringAssemblyContext_AssemblyConnector.id);	
	var loadbalancerReplicableConnectorsSize : Integer := loadbalancerReplicableConnectors->size();
	var replicableProvidedRoles : Integer := replicableAssembly.encapsulatedComponent__AssemblyContext.providedRoles_InterfaceProvidingEntity->size();
															
	assert error(loadbalancerReplicableConnectorsSize = replicableProvidedRoles)
			with log('The number of connectors between the loadbalancer assembly'+ loadbalancerAssembly.id + 
				' and the replicable assembly ' +replicableAssembly.id+ ' is '+loadbalancerReplicableConnectorsSize.toString()+' instead of '+ replicableProvidedRoles.toString());	
}

query testConnectorsToLoadbalancerOnly(oldSystem : System,newSystem : System){
	var newSystemConnectors : Set(Connector) := newSystem.connectors__ComposedStructure;
	var replicableConnectors : Set(Connector) := getAllConnectorsToReplicableAssemblies(oldSystem);
	var targetReplicableAssemblyContext : AssemblyContext;
	var loadbalancerAssemblyContextID : String;
	var loadbalancerAssemblyContext : AssemblyContext;
	var originalTargetAssemblyContext : AssemblyContext;
	replicableConnectors->forEach(replicableConnector){
		if(replicableConnector.oclIsTypeOf(AssemblyConnector)){
			var replicableAssemblyConnector : AssemblyConnector := replicableConnector.oclAsType(AssemblyConnector);
			var originalAssemblyConnector : AssemblyConnector := newSystemConnectors->selectOne(assemblyConnector : AssemblyConnector | assemblyConnector.id = replicableAssemblyConnector.id).oclAsType(AssemblyConnector); 
			originalTargetAssemblyContext := getProvidingAssemblyContext(originalAssemblyConnector);
			targetReplicableAssemblyContext := getProvidingAssemblyContext(replicableAssemblyConnector);
		}
		else if(replicableConnector.oclIsTypeOf(ProvidedDelegationConnector)){
			var replicableProvidedDelegationConnector : ProvidedDelegationConnector := replicableConnector.oclAsType(ProvidedDelegationConnector);	
			var originalProvidedDelegationConnector : ProvidedDelegationConnector := newSystemConnectors->selectOne(providedDelegationConnector : ProvidedDelegationConnector | providedDelegationConnector.id = replicableProvidedDelegationConnector.id).oclAsType(ProvidedDelegationConnector);
			originalTargetAssemblyContext := getProvidingAssemblyContext(originalProvidedDelegationConnector);
			targetReplicableAssemblyContext := getProvidingAssemblyContext(replicableProvidedDelegationConnector);
		};
		if(hasAppliedStereotype(targetReplicableAssemblyContext,"OriginalAssemblyContext")){
			loadbalancerAssemblyContextID := getStringTaggedValue(targetReplicableAssemblyContext,"loadbalancerAssemblyContext","OriginalAssemblyContext"); 
				assert error(originalTargetAssemblyContext.id = loadbalancerAssemblyContextID)
				with log('The target assembly context of the assembly connector'+ replicableConnector.id + 
						' is not the loadbalancer ' +loadbalancerAssemblyContextID+ '. Instead the target assembly context is '+originalTargetAssemblyContext.id+'.');
			};
	};
}

query testLoadbalancerProvidedRoles(loadbalancerAssembly : AssemblyContext, replicableAssemblyContext : AssemblyContext){
	var loadbalancerRepositoryComponent : RepositoryComponent := loadbalancerAssembly.encapsulatedComponent__AssemblyContext;
	var loadbalancerProvidedRoles : Set(ProvidedRole) := loadbalancerRepositoryComponent.providedRoles_InterfaceProvidingEntity;
	var replicableRepositoryComponent : RepositoryComponent := replicableAssemblyContext.encapsulatedComponent__AssemblyContext;
	var replicableProvidedRoles : Set(ProvidedRole) := replicableRepositoryComponent.providedRoles_InterfaceProvidingEntity;
	replicableProvidedRoles->forEach(providedRole){
		if(providedRole.oclIsTypeOf(OperationProvidedRole)){
			var replicableOperationProvidedRole : OperationProvidedRole := providedRole.oclAsType(OperationProvidedRole);
			var loadbalancerOperationProvidedRole : OperationProvidedRole := loadbalancerProvidedRoles->selectByType(OperationProvidedRole)->selectOne(operationProvidedRole : OperationProvidedRole | operationProvidedRole.providedInterface__OperationProvidedRole.id = replicableOperationProvidedRole.providedInterface__OperationProvidedRole.id);
			assert error(not(loadbalancerOperationProvidedRole->isEmpty()))
				with log('The loadbalancer repository component '+loadbalancerRepositoryComponent.id+' does not provide the interface '+ loadbalancerOperationProvidedRole.providedInterface__OperationProvidedRole.id + 
						' which is provided by the replicable repository component ' +replicableRepositoryComponent.id+ '.');
			loadbalancerProvidedRoles := loadbalancerProvidedRoles->excluding(loadbalancerOperationProvidedRole);
		};
	};
}

query testLoadbalancerRequiredRoles(loadbalancerAssembly : AssemblyContext){
	var loadbalancerRepositoryComponent : RepositoryComponent := loadbalancerAssembly.encapsulatedComponent__AssemblyContext;
	var loadbalancerProvidedRoles : Set(ProvidedRole) := loadbalancerRepositoryComponent.providedRoles_InterfaceProvidingEntity;
	var loadbalancerRequiredRoles : Set(RequiredRole) := loadbalancerRepositoryComponent.requiredRoles_InterfaceRequiringEntity;
	var replicableResourceContainer : ResourceContainer := getStereotypedResourceContainerBeforeCompletion("ReplicableResourceContainer");
	var numberOfReplicas : Integer := getIntTaggedValue(replicableResourceContainer,"numberOfReplicas","ReplicableResourceContainer");
	loadbalancerProvidedRoles->forEach(loadbalancerProvidedRole){
		if(loadbalancerProvidedRole.oclIsTypeOf(OperationProvidedRole)){
			var loadbalancerOperationProvidedRole : OperationProvidedRole := loadbalancerProvidedRole.oclAsType(OperationProvidedRole);
			var loadbalancerOperationRequiredRoles : Set(OperationRequiredRole) := loadbalancerRequiredRoles->selectByType(OperationRequiredRole);
			var requiredRolesMatchingProvidedRole : Set(OperationRequiredRole) := loadbalancerOperationRequiredRoles->select(operationRequiredRole : OperationRequiredRole | operationRequiredRole.requiredInterface__OperationRequiredRole.id = loadbalancerOperationProvidedRole.providedInterface__OperationProvidedRole.id);
			var requiredRolesMatchingProvidedRoleSize : Integer := requiredRolesMatchingProvidedRole->size();
			assert error(requiredRolesMatchingProvidedRoleSize = numberOfReplicas)
				with log('The loadbalancer repository component '+loadbalancerRepositoryComponent.id+' requires '+ requiredRolesMatchingProvidedRoleSize.toString() + 
						'times the interface ' +loadbalancerOperationProvidedRole.providedInterface__OperationProvidedRole.id+ ' but it is needed '+numberOfReplicas.toString()+' times instead.');
		};
	};
}

query testLoadbalancersSEFF(loadbalancerAssemly : AssemblyContext){
	var loadbalancerRepositoryComponent : RepositoryComponent := loadbalancerAssemly.encapsulatedComponent__AssemblyContext;
	var loadbalancerOperationRequiredRoles := loadbalancerRepositoryComponent.requiredRoles_InterfaceRequiringEntity->selectByType(OperationRequiredRole);
	var replicableResourceContainer : ResourceContainer := getStereotypedResourceContainerBeforeCompletion("ReplicableResourceContainer");
	var numberOfReplicas : Integer := getIntTaggedValue(replicableResourceContainer,"numberOfReplicas","ReplicableResourceContainer");
	var resourceDemandingSeffs : Bag(ResourceDemandingSEFF) := loadbalancerRepositoryComponent.oclAsType(BasicComponent).serviceEffectSpecifications__BasicComponent.oclAsType(ResourceDemandingSEFF);
	var branchActions : Set(BranchAction);
	var branches : Bag(AbstractBranchTransition);
	resourceDemandingSeffs->forEach(resourceDemandingSeff){
		branchActions := resourceDemandingSeff.steps_Behaviour->selectByType(BranchAction);
		branches := branchActions.branches_Branch;
		assert error(branches->size()=numberOfReplicas) 
			with log('The loadbalancers Seff does not call '+numberOfReplicas.toString()+' required role');
		var resourceDemandingBehaviors : Set(ResourceDemandingBehaviour);
		var delegatingExternalCallAction : Set(DelegatingExternalCallAction);
		branches->forEach(branch){
			resourceDemandingBehaviors := branch.branchBehaviour_BranchTransition->selectByType(ResourceDemandingBehaviour);
			resourceDemandingBehaviors->forEach(resourceDemandingBehavior){
							delegatingExternalCallAction += resourceDemandingBehavior.steps_Behaviour->selectByType(DelegatingExternalCallAction);	
			};	
		};
	var delegatingExternalCallActionInterfaces := delegatingExternalCallAction->collect(action| action.role_ExternalService.requiredInterface__OperationRequiredRole.id);
	assert error(delegatingExternalCallActionInterfaces->forAll(interface1,interface2| interface1 = interface2))
		with log('The resource demanding SEFF '+resourceDemandingSeff.id+' does request another interface');
	
	var operationRequiredRolesOfDelegatingExternalCallActionInterface : Set(OperationRequiredRole) := loadbalancerOperationRequiredRoles->select(operationRequiredRole | operationRequiredRole.requiredInterface__OperationRequiredRole.id = delegatingExternalCallActionInterfaces->any(true));
	var operationRequiredRolesMatch := operationRequiredRolesOfDelegatingExternalCallActionInterface-(delegatingExternalCallAction.role_ExternalService->asSet());
	var delim : String := "";
	assert error(operationRequiredRolesMatch->isEmpty()) 
		with log('The resource demanding SEFF '+resourceDemandingSeff.id+' does not request the required roles:[ '
				+operationRequiredRolesMatch->forEach(operationRequiredRole){delim+operationRequiredRole.id; delim :=";";}+']');
	};
}

query testDuplicateAssembliesAllocatedToDuplicateResourceContainer(newAllocation : Allocation,oldAllocation:Allocation){
	var newAssemblyContexts : Set(AssemblyContext) := newAllocation.system_Allocation.assemblyContexts__ComposedStructure;
	var replicableResourceContainer : ResourceContainer := getStereotypedResourceContainerBeforeCompletion("ReplicableResourceContainer");
	var replicableAssemblyContexts : Bag(AssemblyContext) := getAssemblyContextsFromResourceContainer(replicableResourceContainer,oldAllocation);
	var duplicateResourceContainer : Set(ResourceContainer) := getStereotypedResourceContainersAferCompletion("DuplicateResourceContainer");
	var duplicateAssemblyContexts : Set(AssemblyContext);
	replicableAssemblyContexts->forEach(replicableAssemblyContext){
		duplicateAssemblyContexts := newAssemblyContexts->select(assembly : AssemblyContext | getStringTaggedValue(assembly,"originalAssemblyContext","DuplicateAssemblyContext")=replicableAssemblyContext.id);
		var duplicateAllocationContexts : Set(AllocationContext);
		var duplicateAllocationContext : AllocationContext;
		duplicateAssemblyContexts->forEach(duplicateAssemblyContext){
		duplicateAllocationContext := getAllocationContextFromAssemblyContextAfterCompletion(duplicateAssemblyContext,newAllocation);
		assert error(not(duplicateAllocationContext->size() =0)) 
				with log('The duplicate assembly context '+duplicateAssemblyContext.id+' is not allocated to a resource container');
		duplicateAllocationContexts += duplicateAllocationContext;
		};
		assert error(duplicateAllocationContexts->forAll(a1,a2| a1.resourceContainer_AllocationContext.id != a2.resourceContainer_AllocationContext.id))
				with log('Not all duplicated assemblies of the replicable assembly context '+replicableAssemblyContext.id+' are allocated to a different duplicated resource container');
	};
}


/**
* Returns the Allocation Context from the given Assembly Context after Completion
**/
query getAllocationContextFromAssemblyContextAfterCompletion(assemblyContext : AssemblyContext,newAllocation : Allocation):AllocationContext{
	return newAllocation.allocationContexts_Allocation->selectOne(allocationContext : AllocationContext | allocationContext.assemblyContext_AllocationContext = assemblyContext);
}

/**
* Returns the Assembly Contexts allocated to the given Resource Containers
**/
query getAssemblyContextsFromResourceContainer(resourceContainer : Set(ResourceContainer), allocation:Allocation):Bag(AssemblyContext){
	var allocationContextsWithResContainer : Set(AllocationContext) := allocation.allocationContexts_Allocation->select(allocationContext : AllocationContext|
																		resourceContainer->includes(allocationContext.resourceContainer_AllocationContext));
	var allocationContextsAssemblies : Bag(AssemblyContext) := allocationContextsWithResContainer->collect(allocationContext|allocationContext.assemblyContext_AllocationContext);
	return allocationContextsAssemblies;
	
}

/**
* Returns the Assembly Contexts allocated to the given Resource Container
**/
query getAssemblyContextsFromResourceContainer(resourceContainer : ResourceContainer, allocation:Allocation):Bag(AssemblyContext){
	var allocationContextsWithResContainer : Set(AllocationContext) := allocation.allocationContexts_Allocation->select(allocationContext : AllocationContext|
																		allocationContext.resourceContainer_AllocationContext.id = resourceContainer.id);
	var allocationContextsAssemblies : Bag(AssemblyContext) := allocationContextsWithResContainer->collect(allocationContext|allocationContext.assemblyContext_AllocationContext);
	return allocationContextsAssemblies;
	
}

/**
* Returns the Resource Container with the given Stereotype after Completion
**/
query getStereotypedResourceContainerAfterCompletion(stereotypeName : String):ResourceContainer{
	return newResEnvironment.resourceContainer_ResourceEnvironment->selectOne(resourceContainer : ResourceContainer | hasAppliedStereotype(resourceContainer,stereotypeName));
}

/**
* Returns a set of Resource Container with the given Stereotype after Completion
**/
query getStereotypedResourceContainersAferCompletion(stereotypeName : String):Set(ResourceContainer){
	return newResEnvironment.resourceContainer_ResourceEnvironment->select(resourceContainer : ResourceContainer| hasAppliedStereotype(resourceContainer,stereotypeName));
}

/**
* Returns the Resource Container with the given Stereotype before Completion
**/
query getStereotypedResourceContainerBeforeCompletion(stereotypeName : String ):ResourceContainer{
	return oldResEnvironment.resourceContainer_ResourceEnvironment->selectOne(resourceContainer : ResourceContainer | hasAppliedStereotype(resourceContainer,stereotypeName));
}

/**
* Returns a set of Linking Resources from the given Resource Container after Completion
**/
query getLinkingResourcesFromResourceContainerAfterCompletion(resourceContainer : ResourceContainer):Set(LinkingResource){
	return newResEnvironment.linkingResources__ResourceEnvironment->select(linkingResource : LinkingResource| linkingResource.connectedResourceContainers_LinkingResource->includes(resourceContainer));
}

/**
 * Returns all connectors whose target is an Assembly Context allocated to the replicable Resource Container and its source is allocated to another Resource Container
 */
query getAllConnectorsToReplicableAssemblies(oldSystem:System):Set(Connector){
	var connectors : Set(Connector) := oldSystem.connectors__ComposedStructure;
	var replicableResContainer : ResourceContainer := getStereotypedResourceContainerBeforeCompletion("ReplicableResourceContainer");
	var connectorsToReplicableAssemblies : Set(Connector);
	var providingAssemblyContext : AssemblyContext;
	var targetResContainer : ResourceContainer;
	connectors->forEach(connector){
		if(connector.oclIsTypeOf(AssemblyConnector)){
			var assemblyConnector : AssemblyConnector := connector.oclAsType(AssemblyConnector);
			providingAssemblyContext := getProvidingAssemblyContext(assemblyConnector);
			var requiringAssemblyContext : AssemblyContext := getRequiringAssemblyContext(assemblyConnector);
			var sourceResContainer : ResourceContainer := findResourceContainerBeforeCompletion(requiringAssemblyContext);
			targetResContainer := findResourceContainerBeforeCompletion(providingAssemblyContext);
			if(sourceResContainer.id != targetResContainer.id and targetResContainer.id = replicableResContainer.id){
				connectorsToReplicableAssemblies+=assemblyConnector;
			};
		}
		else if(connector.oclIsTypeOf(ProvidedDelegationConnector)){
			var providedDelegationConnector : ProvidedDelegationConnector := connector.oclAsType(ProvidedDelegationConnector);
			providingAssemblyContext := getProvidingAssemblyContext(providedDelegationConnector);
			targetResContainer := findResourceContainerBeforeCompletion(providingAssemblyContext);
			if(targetResContainer.id = replicableResContainer.id){
				connectorsToReplicableAssemblies += providedDelegationConnector;
			};
		};
	};
	
	return connectorsToReplicableAssemblies;
}

query getAllReplicableAssemblies(connectorsToReplicableAssemblies : Set(Connector)):Set(AssemblyContext){
	var providingAssemblyContexts : Set(AssemblyContext);
	connectorsToReplicableAssemblies ->forEach(connector){
 	if(connector.oclIsTypeOf(AssemblyConnector)){
 		var assemblyConnector : AssemblyConnector := connector.oclAsType(AssemblyConnector);
 		providingAssemblyContexts += getProvidingAssemblyContext(assemblyConnector);
 		
 	}
 	else if(connector.oclIsTypeOf(ProvidedDelegationConnector)){
 		var providedDelegationConnector : ProvidedDelegationConnector := connector.oclAsType(ProvidedDelegationConnector);	
 		providingAssemblyContexts += getProvidingAssemblyContext(providedDelegationConnector);
 	};
 };
 
 return providingAssemblyContexts;
}

/**
 * Returns the providing component of a given connector.
 */
query getProvidingAssemblyContext(providedDelegationConnector : ProvidedDelegationConnector) : AssemblyContext {
	return providedDelegationConnector.assemblyContext_ProvidedDelegationConnector;
}

/**
 * Returns the requiring component of a given connector.
 */
query getRequiringAssemblyContext(assemblyConnector : AssemblyConnector) : AssemblyContext {
	return assemblyConnector.requiringAssemblyContext_AssemblyConnector;
}

/**
 * Returns the providing component of a given connector.
 */
query getProvidingAssemblyContext(assemblyConnector : AssemblyConnector) : AssemblyContext {
	return assemblyConnector.providingAssemblyContext_AssemblyConnector;
}

/**
 * Returns the ResourceContainer the AllocationContext corresponds to in the Allocation before Completion
 */
query findResourceContainerBeforeCompletion(assemblyContext : AssemblyContext) : ResourceContainer {
	var acs : Bag(AllocationContext) := allocationBeforeCompletion.rootObjects().subobjects()[AllocationContext];
	return acs->selectOne(
		ac : AllocationContext | 
		ac.assemblyContext_AllocationContext.id = assemblyContext.id
		).resourceContainer_AllocationContext;
}

/**
 * Returns the ResourceContainer the AllocationContext corresponds to in the Allocation after Completion
 */
query findResourceContainerAfterCompletion(assemblyContext : AssemblyContext) : ResourceContainer {
	var acs : Bag(AllocationContext) := allocationAfterCompletion.rootObjects().subobjects()[AllocationContext];
	return acs->selectOne(
		ac : AllocationContext | 
		ac.assemblyContext_AllocationContext.id = assemblyContext.id
		).resourceContainer_AllocationContext;
}

/**
 * Returns the ResourceContainer of the ResourceEnvironment before Completion
 */
query getOldResourceContainer():Set(ResourceContainer){
	return oldResEnvironment.resourceContainer_ResourceEnvironment;
}

/**
 * Returns the ResourceContainer of the ResourceEnvironment after Completion
 */
query getNewResourceContainer():Set(ResourceContainer){
	return newResEnvironment.resourceContainer_ResourceEnvironment;
}