import org.scaledl.architecturaltemplates.repositories.cloudscale.black.ProfilesLibrary;

modeltype PCM_ALLOC uses 'http://palladiosimulator.org/PalladioComponentModel/Allocation/5.1';
modeltype PCM_REP uses 'http://palladiosimulator.org/PalladioComponentModel/Repository/5.1';
modeltype PCM_SYS uses 'http://palladiosimulator.org/PalladioComponentModel/System/5.1';
modeltype PCM_RES_ENV uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceEnvironment/5.1';
modeltype PCM_CORE uses 'http://palladiosimulator.org/PalladioComponentModel/Core/5.1';
modeltype PCMComposition uses pcm::core::composition('http://palladiosimulator.org/PalladioComponentModel/5.1');
modeltype PCMSEFF uses pcm::seff('http://palladiosimulator.org/PalladioComponentModel/SEFF/5.1');
modeltype PCM_COMPLETION uses 'http://palladiosimulator.org/AnalyzerFramework/Completions/1.0';

transformation LoadbalancingCompletionTest(inout allocationBeforeCompletion : PCM_ALLOC, inout allocationAfterCompletion : PCM_ALLOC);

property newAllocation : Allocation;
property oldAllocation : Allocation;

main() {
log('Test started');
	oldAllocation := allocationBeforeCompletion.rootObjects()![Allocation];
	newAllocation := allocationAfterCompletion.rootObjects()![Allocation];
	var oldSystem : System := oldAllocation.system_Allocation;
	var newSystem : System := newAllocation.system_Allocation;
	var oldAssemblyContexts : Set(AssemblyContext) := oldSystem.assemblyContexts__ComposedStructure;
	var newAssemblyContexts : Set(AssemblyContext) := newSystem.assemblyContexts__ComposedStructure;
	
	testLoadbalancerAssemblyContextExists(newAssemblyContexts);
	testLoadbalancerAssemblyContextEqualsOne(newAssemblyContexts);
	testNewAssemblyContextsSizeEqualsOldAssemblyContextsSizePlusNumberOfReplicas(oldAssemblyContexts,newAssemblyContexts);
	testNumberOfReplicasEqualsNumberOfOriginalAndDuplicateAssemblyContexts(newAssemblyContexts);
	testConnectorFromLoadbalancerToOriginalExists(newSystem);
	testAssemblyConnectorsOnlyBetweenLoadbalancerAndOriginalAssemblyContext(newSystem);
	testNoProvidedDelegationConnectorToOriginalAssemblyContext(newSystem);
	testConnectorsFromLoadbalancerToDuplicatesExist(newSystem);
	testConnectorsOnlyToLoadbalancer(oldSystem,newSystem);
	testDuplicateAssemblyContextsEncapsulateReplicableRepositoryComponent();
	testLoadbalancerRepositoryComponentIsNewlyCreated(oldSystem,newSystem);
	testNumberOfLoadbalancersRequiredRolesEqualsNumberOfReplicas(oldSystem,newSystem);
	testLoadbalancerProvidedRolesEqualReplicableProvidedRoles(oldSystem, newSystem);
	testLoadbalancerSeffCallsRequiredRoles();
	testNumberOfNewResourceContainer();
	testDuplicatesAllocatedToNewResourceContainer();
	testLoadbalancerAllocatedToNewResourceContainer();
	testDuplicateResourceContainerConnectedToSameLinkingResource();
	testLoadblancerResourceContainerConntectedToSameLinkingResource();
	testNewResContainerSpecificationsEqualReplicableResContainer();
	
log('Test finished');
}

/**
* Tests whether there is at least one Loadbalancer
**/
query testLoadbalancerAssemblyContextExists(newAssemblyContexts : Set(AssemblyContext)){
	assert error(hasAppliedStereotype(newAssemblyContexts,"LoadbalancerAssemblyContext")) 
		with log('There is no loadbalancer assembly context');
}

/**
* Tests whether there is only one Loadbalancer
**/
query testLoadbalancerAssemblyContextEqualsOne(newAssemblyContexts : Set(AssemblyContext)){
	var loadbalancerAssemblyContexts : Set(AssemblyContext) := newAssemblyContexts->select(assemblyContext : AssemblyContext| 
		hasAppliedStereotype(assemblyContext,"LoadbalancerAssemblyContext"));
	var loadbalancerAssemblyContextsSize : Integer := loadbalancerAssemblyContexts->size();
	assert error(loadbalancerAssemblyContextsSize = 1) 
		with log('The number of loadbalancer does not equal 1 but '+ loadbalancerAssemblyContextsSize.toString());
}

/**
* Tests whether the the number of all assembly contexts in the system after completion equals the number of assembly contexts 
* in the system before the completion plus the predefined number of replicas
**/
query testNewAssemblyContextsSizeEqualsOldAssemblyContextsSizePlusNumberOfReplicas(oldAssemblyContexts : Set(AssemblyContext), newAssemblyContexts : Set(AssemblyContext)){
	var replicableAssemblyContext : AssemblyContext := getStereotypedAssemblyContextBeforeCompletion("ReplicableAssemblyContext");
	var numberOfReplicas : Integer := getIntTaggedValue(replicableAssemblyContext,"numberOfReplicas","ReplicableAssemblyContext");
	var oldAssemblyContextsSize : Integer := oldAssemblyContexts->size();
	var newAssemblyContextsSize : Integer := newAssemblyContexts->size();
	assert error(oldAssemblyContextsSize + numberOfReplicas = newAssemblyContextsSize) 
		with log('The number of assembly contexts before completion('+oldAssemblyContextsSize.toString()+') plus the number of replicas('+numberOfReplicas.toString()+') 
					does not equal the number of new assembly contexts('+newAssemblyContextsSize.toString()+')');
}

/**
* Tests whether the original assembly context plus its duplicates equals the predefined number of replicas
**/
query testNumberOfReplicasEqualsNumberOfOriginalAndDuplicateAssemblyContexts(newAssemblyContexts : Set(AssemblyContext)){
	var replicableAssemblyContext : AssemblyContext := getStereotypedAssemblyContextBeforeCompletion("ReplicableAssemblyContext");
	var numberOfReplicas : Integer := getIntTaggedValue(replicableAssemblyContext,"numberOfReplicas","ReplicableAssemblyContext");
	var originalAndDuplicateAssemblyContext : Set(AssemblyContext) := newAssemblyContexts->select(assemblyContext : AssemblyContext| 
		hasAppliedStereotype(assemblyContext,"OriginalAssemblyContext") or hasAppliedStereotype(assemblyContext,"DuplicateAssemblyContext"));
	var numberOfOriginalAndDuplicateAssemblyContexts : Integer := originalAndDuplicateAssemblyContext->size();
	assert error(numberOfReplicas = numberOfOriginalAndDuplicateAssemblyContexts) 
		with log('The number of original and duplicate assembly contexts('+numberOfOriginalAndDuplicateAssemblyContexts.toString()+') does not equal the predefined number of replicas('+numberOfReplicas.toString()+')');
}

/**
* Tests whether there exists only one assembly connector between the loadbalancer and the original assembly context
**/
query testConnectorFromLoadbalancerToOriginalExists(newSystem : System){
	var originalAssemblyContext : AssemblyContext := getStereotypedAssemblyContextAfterCompletion("OriginalAssemblyContext");
	var numberOfDifferentProvidedRoles : Integer := originalAssemblyContext.encapsulatedComponent__AssemblyContext.providedRoles_InterfaceProvidingEntity->size();
	var loadbalancerAssemblyContext : AssemblyContext := getStereotypedAssemblyContextAfterCompletion("LoadbalancerAssemblyContext");
	var connectors : Set(Connector) := newSystem.connectors__ComposedStructure;
	var assemblyConnectors : Bag(AssemblyConnector) := connectors->select(connector : Connector | connector.oclIsTypeOf(AssemblyConnector)).oclAsType(AssemblyConnector);
	var loadbalancerToOriginalAssemblyConnectors : Bag(AssemblyConnector) := assemblyConnectors -> select(assemblyConnector : AssemblyConnector|
		assemblyConnector.requiringAssemblyContext_AssemblyConnector = loadbalancerAssemblyContext and assemblyConnector.providingAssemblyContext_AssemblyConnector = originalAssemblyContext);
	var loadbalancerToOriginalAssemblyConnectorsSize : Integer := loadbalancerToOriginalAssemblyConnectors->size(); 
	assert error(loadbalancerToOriginalAssemblyConnectorsSize = numberOfDifferentProvidedRoles) 
		with log('The number of assembly connectors between the loadbalancer and the original assembly context('+loadbalancerToOriginalAssemblyConnectorsSize.toString()+') does not equal 1');
}

/**
* Tests whether there is no assembly connector to the original assembly context other than from the loadbalancer
**/
query testAssemblyConnectorsOnlyBetweenLoadbalancerAndOriginalAssemblyContext(newSystem : System){
	var connectors : Set(Connector) := newSystem.connectors__ComposedStructure;
	var assemblyConnectors : Bag(AssemblyConnector) := connectors->select(connector : Connector | connector.oclIsTypeOf(AssemblyConnector)).oclAsType(AssemblyConnector);
	var originalAssemblyContext : AssemblyContext := getStereotypedAssemblyContextAfterCompletion("OriginalAssemblyContext");
	var loadbalancerAssemblyContext : AssemblyContext := getStereotypedAssemblyContextAfterCompletion("LoadbalancerAssemblyContext");
	var assemblyConnectorsNotFromLoadbalancer : Bag(AssemblyConnector) := assemblyConnectors->select(assemblyConnector : AssemblyConnector|
		 assemblyConnector.providingAssemblyContext_AssemblyConnector  = originalAssemblyContext and not(assemblyConnector.requiringAssemblyContext_AssemblyConnector = loadbalancerAssemblyContext));
	var delim : String := "";
	assert error (assemblyConnectorsNotFromLoadbalancer->isEmpty())
		with log('There exists an assembly connector between an assembly context other than 
					the loadbalancer and the original assembly context:['+assemblyConnectorsNotFromLoadbalancer->forEach(assemblyConnector){delim+assemblyConnector.id; delim :=";";}+']'
		);	
}

/**
* Tests whether there is no provided delegation connector to the original assembly context
**/
query testNoProvidedDelegationConnectorToOriginalAssemblyContext(newSystem : System){
	var connectors : Set(Connector) := newSystem.connectors__ComposedStructure;
	var providedDelegationConnectors : Bag(ProvidedDelegationConnector) := connectors->select(connector : Connector | connector.oclIsTypeOf(ProvidedDelegationConnector)).oclAsType(ProvidedDelegationConnector);
	var originalAssemblyContext : AssemblyContext := getStereotypedAssemblyContextAfterCompletion("OriginalAssemblyContext");	
	var providedDelegationConnectorsToOriginial : Bag(ProvidedDelegationConnector) := providedDelegationConnectors->select(providedDelegationConnector : ProvidedDelegationConnector|
		 providedDelegationConnector.assemblyContext_ProvidedDelegationConnector  = originalAssemblyContext);
	var delim : String := "";
	assert error (providedDelegationConnectorsToOriginial->isEmpty())
		with log('There exists a provided delegation connector to the original assembly context:['
				+providedDelegationConnectorsToOriginial->forEach(providedDelegationConnector){delim+providedDelegationConnector.id; delim :=";";}+']');	
}

/**
* Tests whether each of the duplicated assembly contexts is connected the the loadbalancer
**/
query testConnectorsFromLoadbalancerToDuplicatesExist(newSystem : System){
	var duplicateAssemblyContexts : Set(AssemblyContext) := getStereotypedAssemblyContextsAfterCompletion("DuplicateAssemblyContext");
	var loadbalancerAssemblyContext : AssemblyContext := getStereotypedAssemblyContextAfterCompletion("LoadbalancerAssemblyContext");
	var replicableAssemblyContext : AssemblyContext := getStereotypedAssemblyContextBeforeCompletion("ReplicableAssemblyContext");
	var numberOfDifferentProvidedRoles : Integer := replicableAssemblyContext.encapsulatedComponent__AssemblyContext.providedRoles_InterfaceProvidingEntity->size();
	var numberOfDuplicates : Integer := getIntTaggedValue(replicableAssemblyContext,"numberOfReplicas","ReplicableAssemblyContext")-1;
	var connectors : Set(Connector) := newSystem.connectors__ComposedStructure;
	var assemblyConnectors : Bag(AssemblyConnector) := connectors->select(connector : Connector | connector.oclIsTypeOf(AssemblyConnector)).oclAsType(AssemblyConnector);
	var loadbalancerToDuplicatesAssemblyConnectors : Bag(AssemblyConnector) := assemblyConnectors->select(assemblyConnector : AssemblyConnector|
		assemblyConnector.requiringAssemblyContext_AssemblyConnector = loadbalancerAssemblyContext and duplicateAssemblyContexts->includes(assemblyConnector.providingAssemblyContext_AssemblyConnector));
	var loadbalancerToDuplicatesAssemblyConnectorsSize : Integer := loadbalancerToDuplicatesAssemblyConnectors->size();
	assert error(loadbalancerToDuplicatesAssemblyConnectorsSize = numberOfDuplicates * numberOfDifferentProvidedRoles) 
		with log('The number of assembly connectors between the loadbalancer and the duplicate assembly contexts('+loadbalancerToDuplicatesAssemblyConnectorsSize.toString()+') does not equal '+numberOfDuplicates.toString());
	
	var loadbalancerDuplicatesMatches := duplicateAssemblyContexts->asSet() - (loadbalancerToDuplicatesAssemblyConnectors.providingAssemblyContext_AssemblyConnector->asSet());
	var delim : String := "";
	assert error(loadbalancerDuplicatesMatches->isEmpty()) 
		with log('The following duplicates are not connected with the loadbalancer '+ loadbalancerAssemblyContext.id+':[ '
				+loadbalancerDuplicatesMatches->forEach(loadbalancerDuplicateMatch){delim+loadbalancerDuplicateMatch.id; delim :=";";}+']');
		
}
	
/**
* Tests whether the loadbalancer is target of all connectors that previously had the replicable assembly as a target 
**/
query testConnectorsOnlyToLoadbalancer(oldSystem : System, newSystem : System){
	var oldConnectors : Set(Connector) := oldSystem.connectors__ComposedStructure;
	var newConnectors : Set(Connector) := newSystem.connectors__ComposedStructure;
	var oldAssemblyContexts : Set(AssemblyContext) := oldSystem.assemblyContexts__ComposedStructure;
	var newAssemblyContexts : Set(AssemblyContext) := newSystem.assemblyContexts__ComposedStructure;
	var loadbalancerAssemblyContext : AssemblyContext := getStereotypedAssemblyContextAfterCompletion("LoadbalancerAssemblyContext");
	var replicableAssemblyContext : AssemblyContext := getStereotypedAssemblyContextBeforeCompletion("ReplicableAssemblyContext");
	var replicableConnectors : Set(Connector);
	var loadbalancerConnectors : Set(Connector);
					
	oldConnectors->forEach(oldConnector){
		if(oldConnector.oclIsTypeOf(AssemblyConnector)){
			var oldAssemblyConnector : AssemblyConnector := oldConnector.oclAsType(AssemblyConnector);
			if(oldAssemblyConnector.providingAssemblyContext_AssemblyConnector = replicableAssemblyContext){
				replicableConnectors += oldAssemblyConnector;
			};
		}
		else if(oldConnector.oclIsTypeOf(ProvidedDelegationConnector)){
			var oldProvidedDelegationConnector : ProvidedDelegationConnector := oldConnector.oclAsType(ProvidedDelegationConnector);
			if(oldProvidedDelegationConnector.assemblyContext_ProvidedDelegationConnector = replicableAssemblyContext){
				replicableConnectors += oldProvidedDelegationConnector;
			};
		};
	};
	newConnectors->forEach(newConnector){
		if(newConnector.oclIsTypeOf(AssemblyConnector)){
		var newAssemblyConnector : AssemblyConnector := newConnector.oclAsType(AssemblyConnector);
			if(newAssemblyConnector.providingAssemblyContext_AssemblyConnector = loadbalancerAssemblyContext){
				loadbalancerConnectors += newAssemblyConnector;
			};
		}
		else if(newConnector.oclIsTypeOf(ProvidedDelegationConnector)){
			var newProvidedDelegationConnector : ProvidedDelegationConnector := newConnector.oclAsType(ProvidedDelegationConnector);
			if(newProvidedDelegationConnector.assemblyContext_ProvidedDelegationConnector = loadbalancerAssemblyContext){
				loadbalancerConnectors += newProvidedDelegationConnector;
			};	
		};
	};
	replicableConnectors->forEach(replicableConnector){
		var loadbalancerConnector : Connector := loadbalancerConnectors->selectOne(connector : Connector | connector.id = replicableConnector.id);
		assert error(loadbalancerConnector != null) 
			with log('The loadbalancer '+loadbalancerAssemblyContext.id.toString()+' is not target of the connector '+replicableConnector.id.toString()+' previously connected with the replicable assembly context');
	
	};
}

/**
* Tests whether the duplicate assembly contexts encapsulate the repository component of the replicable assembly context
**/
query testDuplicateAssemblyContextsEncapsulateReplicableRepositoryComponent(){
	var duplicateAssemblyContexts : Set(AssemblyContext) := getStereotypedAssemblyContextsAfterCompletion("DuplicateAssemblyContext");
	var replicableAssemblyContext : AssemblyContext := getStereotypedAssemblyContextBeforeCompletion("ReplicableAssemblyContext");
	var replicableRepositoryComponent : RepositoryComponent := replicableAssemblyContext.encapsulatedComponent__AssemblyContext;
	duplicateAssemblyContexts->forEach(duplicateAssemblyContext){
		assert error(duplicateAssemblyContext.encapsulatedComponent__AssemblyContext.id = replicableRepositoryComponent.id)
			with log('The duplicated Assembly Context ' + duplicateAssemblyContext.id.toString()+ 'encapsulates not the replicable Repository Component '+ replicableRepositoryComponent.id.toString());
	};
}


/**
* Tests whether a loadbalancer repository component is newly created in the completion
**/
query testLoadbalancerRepositoryComponentIsNewlyCreated(oldSystem : System, newSystem : System){
	var loadbalancerAssemblyContext : AssemblyContext := getStereotypedAssemblyContextAfterCompletion("LoadbalancerAssemblyContext");
	var loadbalancerRepositoryComponent : RepositoryComponent := loadbalancerAssemblyContext.encapsulatedComponent__AssemblyContext;
	var replicableAssemblyContext : AssemblyContext := getStereotypedAssemblyContextBeforeCompletion("ReplicableAssemblyContext");
	var oldRepository : Repository := replicableAssemblyContext.encapsulatedComponent__AssemblyContext.repository__RepositoryComponent;
	var oldRepositoryComponents : Set(RepositoryComponent) := oldRepository.components__Repository;
	assert error(oldRepositoryComponents->excludes(loadbalancerRepositoryComponent)) 
			with log('The loadbalancer repository component '+loadbalancerRepositoryComponent.id+' already exists in the repository before completion.');
	
}
/**
* Tests for each provided role of the replicable repository component whether the number 
* of loadbalancer's required roles equal the number of replicas
**/
query testNumberOfLoadbalancersRequiredRolesEqualsNumberOfReplicas(oldSystem : System, newSystem : System){
	var loadbalancerAssemblyContext : AssemblyContext := getStereotypedAssemblyContextAfterCompletion("LoadbalancerAssemblyContext");
	var loadbalancerRepositoryComponent : RepositoryComponent := loadbalancerAssemblyContext.encapsulatedComponent__AssemblyContext;
	var loadbalancerRequiredRoles : Bag(OperationRequiredRole) := loadbalancerRepositoryComponent.requiredRoles_InterfaceRequiringEntity.oclAsType(OperationRequiredRole);
	var replicableAssemblyContext : AssemblyContext := getStereotypedAssemblyContextBeforeCompletion("ReplicableAssemblyContext");
	var numberOfReplicas : Integer := getIntTaggedValue(replicableAssemblyContext,"numberOfReplicas","ReplicableAssemblyContext");
	var replicableRepositoryComponent : RepositoryComponent := replicableAssemblyContext.encapsulatedComponent__AssemblyContext;
	var replicableProvidedRoles : Bag(OperationProvidedRole) := replicableRepositoryComponent.providedRoles_InterfaceProvidingEntity.oclAsType(OperationProvidedRole);
	replicableProvidedRoles->forEach(providedRole){
		var matchedLoadbalancerRequiredRoles : Bag(OperationRequiredRole) := loadbalancerRequiredRoles->select(requiredRole : OperationRequiredRole | requiredRole.requiredInterface__OperationRequiredRole.id = providedRole.providedInterface__OperationProvidedRole.id);
		var matchedLoadbalancerRequiredRolesSize : Integer := matchedLoadbalancerRequiredRoles->size();
		assert error(matchedLoadbalancerRequiredRolesSize = numberOfReplicas) 
			with log('The loadbalancer repository component provides '+matchedLoadbalancerRequiredRolesSize.toString()+
			' required roles for the provided role '+providedRole.id+ ' but '+numberOfReplicas.toString()+' are needed.');
	}
}

/**
* Tests whether all provided roles' interfaces of the loadbalancer repository component
* equal the provided roles' interfaces of the replicable assembly context repository component
**/
query testLoadbalancerProvidedRolesEqualReplicableProvidedRoles(oldSystem : System, newSystem : System){
	var loadbalancerAssemblyContext : AssemblyContext := getStereotypedAssemblyContextAfterCompletion("LoadbalancerAssemblyContext");
	var loadbalancerRepositoryComponent : RepositoryComponent := loadbalancerAssemblyContext.encapsulatedComponent__AssemblyContext;
	var loadbalancerProvidedRoles : Bag(OperationProvidedRole) :=loadbalancerRepositoryComponent.providedRoles_InterfaceProvidingEntity.oclAsType(OperationProvidedRole);
	var replicableAssemblyContext : AssemblyContext := getStereotypedAssemblyContextBeforeCompletion("ReplicableAssemblyContext");
	var replicableRepositoryComponent : RepositoryComponent := replicableAssemblyContext.encapsulatedComponent__AssemblyContext;
	var replicableProvidedRoles : Bag(OperationProvidedRole) := replicableRepositoryComponent.providedRoles_InterfaceProvidingEntity.oclAsType(OperationProvidedRole);
	replicableProvidedRoles ->forEach(replicableProvidedRole){
		var matchedLoadbalancerProvidedRole : OperationProvidedRole := loadbalancerProvidedRoles->selectOne(providedRole : OperationProvidedRole |  providedRole.providedInterface__OperationProvidedRole.id = replicableProvidedRole.providedInterface__OperationProvidedRole.id);
		assert error(matchedLoadbalancerProvidedRole!=null) 
			with log('The loadbalancer repository component '+loadbalancerRepositoryComponent.id+' does not provide the 
					provided role '+replicableProvidedRole.id+' provided by the replicable repository component.');
		if(matchedLoadbalancerProvidedRole != null){
			loadbalancerProvidedRoles := loadbalancerProvidedRoles->excluding(matchedLoadbalancerProvidedRole);
		};
	};
	var loadbalancerProvidedRolesSize : Integer := loadbalancerProvidedRoles->size();	
	var replicableProvidedRolesSize : Integer := replicableProvidedRoles->size(); 
	var delim : String := "";
	assert error(loadbalancerProvidedRolesSize=0) 
			with log('The loadbalancer repository component '+loadbalancerRepositoryComponent.id+' provides '
					 +loadbalancerProvidedRolesSize.toString()+' provided roles instead of '+replicableProvidedRolesSize.toString()
					 +' as the replicable repository component '+replicableRepositoryComponent.toString()+'. The loadbalancer repository component misses:[ '
					 +loadbalancerProvidedRoles->forEach(loadbalancerProvidedRole){delim+loadbalancerProvidedRole.id; delim :=";";}+']');
}

/**
* Tests whether the loadbalancer's SEFF has a branch for each required role
**/
query testLoadbalancerSeffCallsRequiredRoles(){
	var loadbalancerAssemblyContext : AssemblyContext := getStereotypedAssemblyContextAfterCompletion("LoadbalancerAssemblyContext");
	var loadbalancerRepositoryComponent : RepositoryComponent := loadbalancerAssemblyContext.encapsulatedComponent__AssemblyContext;
	var loadbalancerOperationRequiredRoles := loadbalancerRepositoryComponent.requiredRoles_InterfaceRequiringEntity->selectByType(OperationRequiredRole);
	var replicableAssemblyContext : AssemblyContext := getStereotypedAssemblyContextBeforeCompletion("ReplicableAssemblyContext");
	var numberOfReplicas : Integer := getIntTaggedValue(replicableAssemblyContext,"numberOfReplicas","ReplicableAssemblyContext");
	var resourceDemandingSeffs : Bag(ResourceDemandingSEFF) := loadbalancerRepositoryComponent.oclAsType(BasicComponent).serviceEffectSpecifications__BasicComponent.oclAsType(ResourceDemandingSEFF);
	var branchActions : Set(BranchAction);
	var branches : Bag(AbstractBranchTransition);
	resourceDemandingSeffs->forEach(resourceDemandingSeff){
		branchActions := resourceDemandingSeff.steps_Behaviour->selectByType(BranchAction);
		branches := branchActions.branches_Branch;
		assert error(branches->size()=numberOfReplicas) 
			with log('The loadbalancers Seff does not call '+numberOfReplicas.toString()+' required role');
		var resourceDemandingBehaviors : Set(ResourceDemandingBehaviour);
		var delegatingExternalCallAction : Set(DelegatingExternalCallAction);
		branches->forEach(branch){
			resourceDemandingBehaviors := branch.branchBehaviour_BranchTransition->selectByType(ResourceDemandingBehaviour);
			resourceDemandingBehaviors->forEach(resourceDemandingBehavior){
							delegatingExternalCallAction += resourceDemandingBehavior.steps_Behaviour->selectByType(DelegatingExternalCallAction);	
			};	
		};
	var delegatingExternalCallActionInterfaces := delegatingExternalCallAction->collect(action| action.role_ExternalService.requiredInterface__OperationRequiredRole.id);
	assert error(delegatingExternalCallActionInterfaces->forAll(interface1,interface2| interface1 = interface2))
		with log('The resource demanding SEFF '+resourceDemandingSeff.id+' does request another interface');
	
	var operationRequiredRolesOfDelegatingExternalCallActionInterface : Set(OperationRequiredRole) := loadbalancerOperationRequiredRoles->select(operationRequiredRole | operationRequiredRole.requiredInterface__OperationRequiredRole.id = delegatingExternalCallActionInterfaces->any(true));
	var operationRequiredRolesMatch := operationRequiredRolesOfDelegatingExternalCallActionInterface-(delegatingExternalCallAction.role_ExternalService->asSet());
	var delim : String := "";
	assert error(operationRequiredRolesMatch->isEmpty()) 
		with log('The resource demanding SEFF '+resourceDemandingSeff.id+' does not request the required roles:[ '
				+operationRequiredRolesMatch->forEach(operationRequiredRole){delim+operationRequiredRole.id; delim :=";";}+']');
	};
}

/**
* Tests whether there are number of replicas many new resource container
**/
query testNumberOfNewResourceContainer(){
	var replicableAssemblyContext : AssemblyContext := getStereotypedAssemblyContextBeforeCompletion("ReplicableAssemblyContext");
		getStereotypedAssemblyContextBeforeCompletion("ReplicableAssemblyContext");
	var numberOfReplicas : Integer := getIntTaggedValue(replicableAssemblyContext,"numberOfReplicas","ReplicableAssemblyContext");
	var oldResEnv : ResourceEnvironment := getOldResourceEnvironment();
	var newResEnv : ResourceEnvironment := getNewResourceEnvironment();
	var oldResContainerSize : Integer := getOldResourceContainer()->size();
	var newResContainerSize : Integer := getNewResourceContainer()->size();
	var expectedResContainerSize : Integer := oldResContainerSize + numberOfReplicas;
	assert error(expectedResContainerSize = newResContainerSize) 
		with log('The number of resource container after completion ('+newResContainerSize.toString()+') does not equal the number before completion plus number of replicas ('
					+expectedResContainerSize.toString()+')');
}

/**
* Tests whether each duplicate is allocated to a newly created resource container
**/
query testDuplicatesAllocatedToNewResourceContainer(){
	var duplicateAssemblyContexts : Set(AssemblyContext) := getStereotypedAssemblyContextsAfterCompletion("DuplicateAssemblyContext");
	var oldResContainer : Set(ResourceContainer) := getOldResourceContainer();
	var newResContainer: Set(ResourceContainer) := getNewResourceContainer();
	var duplicateResContainer : Set(ResourceContainer) := newResContainer-(oldResContainer);
	duplicateAssemblyContexts->forEach(duplicateAssemblyContext){
		var duplicateAllocationContext : AllocationContext := getAllocationContextFromAssemblyContextAfterCompletion(duplicateAssemblyContext);
		assert error(duplicateAllocationContext->size() = 1) 
			with log('The duplicate assembly context '+duplicateAssemblyContext.id+' is not allocated to a resource container');
		var relatedResourceContainer : ResourceContainer:= duplicateAllocationContext.resourceContainer_AllocationContext;
		assert error(duplicateResContainer->includes(relatedResourceContainer))
			with log('The duplicate assembly context '+duplicateAssemblyContext.id+' is allocated to the resource container '+ relatedResourceContainer.id+' that was not newly created.');
	};
}

/**
* Tests whether the loadbalancer is allocated to a newly created resource container
**/
query testLoadbalancerAllocatedToNewResourceContainer(){
	var loadbalancerAssemblyContext : AssemblyContext := getStereotypedAssemblyContextAfterCompletion("LoadbalancerAssemblyContext");
	var oldResContainer : Set(ResourceContainer) := getOldResourceContainer();
	var newResContainer: Set(ResourceContainer) := getNewResourceContainer();
	var duplicateResContainer : Set(ResourceContainer) := newResContainer-(oldResContainer);
	var loadbalancerAllocationContext : AllocationContext := getAllocationContextFromAssemblyContextAfterCompletion(loadbalancerAssemblyContext);
	assert error(loadbalancerAllocationContext->size() = 1) 
		with log('The loadbalancer assembly context '+loadbalancerAssemblyContext.id+' is not allocated to a resource container');
	var loadbalancerResourceContainer : ResourceContainer:= loadbalancerAllocationContext.resourceContainer_AllocationContext;
	assert error(duplicateResContainer->includes(loadbalancerResourceContainer))
		with log('The loadbalancer assembly context '+loadbalancerAssemblyContext.id+' is allocated to the resource container '+loadbalancerResourceContainer.id+' that was not newly created.');
}

/**
* Tests whether the duplicated resource container are connected to the same linking 
* resource as the replicable's resource container
**/
query testDuplicateResourceContainerConnectedToSameLinkingResource(){
	var duplicateAssemblyContexts : Set(AssemblyContext) := getStereotypedAssemblyContextsAfterCompletion("DuplicateAssemblyContext");
	var duplicateAllocationContexts : Set(AllocationContext) := getAllocationContextsFromAssemblyContextsAfterCompletion(duplicateAssemblyContexts);
	var duplicateResContainers : Bag(ResourceContainer) := duplicateAllocationContexts.resourceContainer_AllocationContext;
	var originalAssemblyContext : AssemblyContext := getStereotypedAssemblyContextAfterCompletion("OriginalAssemblyContext");
	var originalAllocationContext : AllocationContext := getAllocationContextFromAssemblyContextAfterCompletion(originalAssemblyContext);
	var originalResourceContainer : ResourceContainer := originalAllocationContext.resourceContainer_AllocationContext;
	var originalLinkingResources : Set(LinkingResource) := getLinkingResourcesFromResourceContainerAfterCompletion(originalResourceContainer);
	var originalLinkingResourceContainer : Set(ResourceContainer);
	var notConnectedResContainer : Bag(ResourceContainer);
	originalLinkingResources->forEach(originalLinkingResource){
		originalLinkingResourceContainer := originalLinkingResource.connectedResourceContainers_LinkingResource;
		notConnectedResContainer := duplicateResContainers->select(duplicateResContainer : ResourceContainer| originalLinkingResourceContainer->excludes(duplicateResContainer));
		var delim : String := "";
		assert error(notConnectedResContainer->isEmpty())
			with log('The duplicate resource container ['+notConnectedResContainer->forEach(resContainer){delim+resContainer.id; delim :=";";}
					+'] are not connected with the replicable linking resource '+originalLinkingResource.id);
	};
}

/**
* Tests whether  the loadbalancers resource container is connected with the replicable linking resource
**/
query testLoadblancerResourceContainerConntectedToSameLinkingResource(){
	var loadbalancerAssemblyContext : AssemblyContext := getStereotypedAssemblyContextAfterCompletion("LoadbalancerAssemblyContext");
	var loadbalancerAllocationContext : AllocationContext := getAllocationContextFromAssemblyContextAfterCompletion(loadbalancerAssemblyContext);
	var loadbalancerResourceContainer : ResourceContainer:= loadbalancerAllocationContext.resourceContainer_AllocationContext;
	var originalAssemblyContext : AssemblyContext := getStereotypedAssemblyContextAfterCompletion("OriginalAssemblyContext");
	var originalAllocationContext : AllocationContext := getAllocationContextFromAssemblyContextAfterCompletion(originalAssemblyContext);
	var originalResourceContainer : ResourceContainer := originalAllocationContext.resourceContainer_AllocationContext;
	var originalLinkingResources : Set(LinkingResource) := getLinkingResourcesFromResourceContainerAfterCompletion(originalResourceContainer);
	var delim : String := "";
	assert error(originalLinkingResources.connectedResourceContainers_LinkingResource->includes(loadbalancerResourceContainer))
		with log('The loadbalancer resource container '+loadbalancerResourceContainer.id+' is not connected with one of the replicable linking resource: ['
		+originalLinkingResources->forEach(originalLinkingResource){delim+originalLinkingResource.id; delim :=";";}+']');
}

/**
* Tests whether the newly created resource container specifications conforms to the resource container specifications on which the Original Assembly Context is allocated
**/
query testNewResContainerSpecificationsEqualReplicableResContainer(){
	var originalAssemblyContext : AssemblyContext := getStereotypedAssemblyContextAfterCompletion("OriginalAssemblyContext");
	var originalAllocationContext : AllocationContext := getAllocationContextFromAssemblyContextAfterCompletion(originalAssemblyContext);
	var originalResourceContainer : ResourceContainer := originalAllocationContext.resourceContainer_AllocationContext;
	var originalResourceContainerSpecifications : Set(ProcessingResourceSpecification) := originalResourceContainer.activeResourceSpecifications_ResourceContainer;
	var newResourceContainer : Set(ResourceContainer) := getNewResourceContainer();
	var oldResourceContainer : Set(ResourceContainer) := getOldResourceContainer();
	var newlyCreatedResourceContainer : Set(ResourceContainer) := newResourceContainer->select(resourceContainer : ResourceContainer | oldResourceContainer.id->excludes(resourceContainer.id));
	var newlyCreatedResContainerSpecifications : Set(ProcessingResourceSpecification);
	newlyCreatedResourceContainer->forEach(newlyCreatedResContainer){
		newlyCreatedResContainerSpecifications := newlyCreatedResContainer.activeResourceSpecifications_ResourceContainer;
		assert error(newlyCreatedResContainerSpecifications.MTTR = originalResourceContainerSpecifications.MTTR)
			with log('The MTTR of the newly created resource container '+ newlyCreatedResContainer.id + ' does not conform to the expected value of the original resource container ' +originalResourceContainer.id);
		assert error(newlyCreatedResContainerSpecifications.MTTF = originalResourceContainerSpecifications.MTTF)
			with log('The MTTF of the newly created resource container '+ newlyCreatedResContainer.id + ' does not conform to the expected value of the original resource container ' +originalResourceContainer.id);
		assert error(newlyCreatedResContainerSpecifications.schedulingPolicy = originalResourceContainerSpecifications.schedulingPolicy)
			with log('The scheduling policy of the newly created resource container '+ newlyCreatedResContainer.id + ' does not conform to the expected value of the original resource container ' +originalResourceContainer.id);
		assert error(newlyCreatedResContainerSpecifications.activeResourceType_ActiveResourceSpecification = originalResourceContainerSpecifications.activeResourceType_ActiveResourceSpecification)
			with log('The active resource type of the newly created resource container '+ newlyCreatedResContainer.id + ' does not conform to the expected value of the original resource container ' +originalResourceContainer.id);
		assert error(newlyCreatedResContainerSpecifications.processingRate_ProcessingResourceSpecification.specification = originalResourceContainerSpecifications.processingRate_ProcessingResourceSpecification.specification)
			with log('The processing rate of the newly created resource container '+ newlyCreatedResContainer.id + ' does not conform to the expected value of the original resource container ' +originalResourceContainer.id);
		assert error(newlyCreatedResContainerSpecifications.numberOfReplicas = originalResourceContainerSpecifications.numberOfReplicas)
			with log('The number of replicas of the newly created resource container '+ newlyCreatedResContainer.id + ' does not conform to the expected value of the original resource container ' +originalResourceContainer.id);
	};
}

/**
* Returns the Assembly Context with the given Stereotype after Completion
**/
query getStereotypedAssemblyContextAfterCompletion(stereotypeName : String):AssemblyContext{
	return newAllocation.system_Allocation.assemblyContexts__ComposedStructure->selectOne(assemblyContext : AssemblyContext|hasAppliedStereotype(assemblyContext,stereotypeName));
}

/**
* Returns a set of Assembly Contexts with the given Stereotype after Completion
**/
query getStereotypedAssemblyContextsAfterCompletion(stereotypeName : String):Set(AssemblyContext){
	return newAllocation.system_Allocation.assemblyContexts__ComposedStructure->select(assemblyContext : AssemblyContext|hasAppliedStereotype(assemblyContext,stereotypeName));
}

/**
* Returns the Allocation Context from the given Assembly Context after Completion
**/
query getAllocationContextFromAssemblyContextAfterCompletion(assemblyContext : AssemblyContext):AllocationContext{
	return newAllocation.allocationContexts_Allocation->selectOne(allocationContext : AllocationContext | allocationContext.assemblyContext_AllocationContext = assemblyContext);
}

/**
* Returns a set of Allocation Contexts from the given set of assembly contexts after Completion
**/
query getAllocationContextsFromAssemblyContextsAfterCompletion(assemblyContexts:Set(AssemblyContext)):Set(AllocationContext) {
	return newAllocation.allocationContexts_Allocation->select(allocationContext : AllocationContext | assemblyContexts->includes(allocationContext.assemblyContext_AllocationContext));
}

/**
* Returns the Assembly Context with the given Stereotype before Completion
**/
query getStereotypedAssemblyContextBeforeCompletion(stereotypeName : String):AssemblyContext{
	return oldAllocation.system_Allocation.assemblyContexts__ComposedStructure->selectOne(assemblyContext : AssemblyContext|hasAppliedStereotype(assemblyContext,stereotypeName));
}

/**
* Returns the Allocation Context from the given Assembly Context before Completion
**/
query getAllocationContextFromStereotypedAssemblyContextBeforeCompletion(stereotypeName : String):AllocationContext{
	return oldAllocation.allocationContexts_Allocation->selectOne(allocationContext : AllocationContext | allocationContext.assemblyContext_AllocationContext = getStereotypedAssemblyContextBeforeCompletion(stereotypeName));
}

/**
* Returns a set of Linking Resources from the given Resource Container after Completion
**/
query getLinkingResourcesFromResourceContainerAfterCompletion(resourceContainer : ResourceContainer):Set(LinkingResource){
	return newAllocation.targetResourceEnvironment_Allocation.linkingResources__ResourceEnvironment->select(linkingResource : LinkingResource| linkingResource.connectedResourceContainers_LinkingResource->includes(resourceContainer));
}

/**
* Returns the Resource Environment before Completion
**/
query getOldResourceEnvironment():ResourceEnvironment{
	return oldAllocation.targetResourceEnvironment_Allocation;
}

/**
* Returns the Resource Environment after Completion
**/
query getNewResourceEnvironment():ResourceEnvironment{
	return newAllocation.targetResourceEnvironment_Allocation;
}

/**
* Returns the Resource Container before Completion
**/
query getOldResourceContainer():Set(ResourceContainer){
	return getOldResourceEnvironment().resourceContainer_ResourceEnvironment;
}

/**
* Returns the Resource Container after Completion
**/
query getNewResourceContainer():Set(ResourceContainer){
	return getNewResourceEnvironment().resourceContainer_ResourceEnvironment;
}