import org.scaledl.architecturaltemplates.repositories.cloudscale.black.ProfilesLibrary;

modeltype PCM_ALLOC uses 'http://palladiosimulator.org/PalladioComponentModel/Allocation/5.1';
modeltype PCM_REP uses 'http://palladiosimulator.org/PalladioComponentModel/Repository/5.1';
modeltype PCM_SYS uses 'http://palladiosimulator.org/PalladioComponentModel/System/5.1';
modeltype PCM_RES_ENV uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceEnvironment/5.1';
modeltype PCM_CORE uses 'http://palladiosimulator.org/PalladioComponentModel/Core/5.1';
modeltype PCMComposition uses pcm::core::composition('http://palladiosimulator.org/PalladioComponentModel/5.1');
modeltype PCMSEFF uses pcm::seff('http://palladiosimulator.org/PalladioComponentModel/SEFF/5.1');
modeltype PCM_COMPLETION uses 'http://palladiosimulator.org/AnalyzerFramework/Completions/1.0';

transformation LoadbalancingCompletionTest(inout allocationBeforeCompletion : PCM_ALLOC, inout allocationAfterCompletion : PCM_ALLOC);

property newAllocation : Allocation;
property oldAllocation : Allocation;

main() {
log('Test started');
	oldAllocation := allocationBeforeCompletion.rootObjects()![Allocation];
	newAllocation := allocationAfterCompletion.rootObjects()![Allocation];
	var oldSystem : System := oldAllocation.system_Allocation;
	var newSystem : System := newAllocation.system_Allocation;
	var oldAssemblyContexts : Set(AssemblyContext) := oldSystem.assemblyContexts__ComposedStructure;
	var newAssemblyContexts : Set(AssemblyContext) := newSystem.assemblyContexts__ComposedStructure;
	
	testLoadbalancerAssemblyContextExists(newAssemblyContexts);
	testLoadbalancerAssemblyContextEqualsOne(newAssemblyContexts);
	testNewAssemblyContextsSizeEqualsOldAssemblyContextsSizePlusNumberOfReplicas(oldAssemblyContexts,newAssemblyContexts);
	testNumberOfReplicasEqualsNumberOfOriginalAndDuplicateAssemblyContexts(newAssemblyContexts);
	testConnectorFromLoadbalancerToOriginalExists(newSystem);
	testAssemblyConnectorsOnlyBetweenLoadbalancerAndOriginalAssemblyContext(newSystem);
	testNoProvidedDelegationConnectorToOriginalAssemblyContext(newSystem);
	testConnectorsFromLoadbalancerToDuplicatesExist(newSystem);
	testConnectorsOnlyToLoadbalancer(oldSystem,newSystem);
	testDuplicateAssemblyContextsEncapsulateReplicableRepositoryComponent();
	testLoadbalancerRepositoryComponentIsNewlyCreated(oldSystem,newSystem);
	testNumberOfLoadbalancersRequiredRolesEqualsNumberOfReplicas(oldSystem,newSystem);
	testLoadbalancerProvidedRolesEqualReplicableProvidedRoles(oldSystem, newSystem);
	testLoadbalancerSeffCallsRequiredRoles();
	testNumberOfNewResourceContainer(oldAllocation,newAllocation);
	testDuplicatesAllocatedToNewResourceContainer(oldAllocation,newAllocation);
	testLoadbalancerAllocatedToNewResourceContainer(oldAllocation,newAllocation);
	testDuplicateResourceContainerConnectedToSameLinkingResource(oldAllocation,newAllocation);
	testLoadblancerResourceContainerConntectedToSameLinkingResource(oldAllocation,newAllocation);
	
log('Test finished');
}

/**
* Tests whether there is at least one Loadbalancer
**/
query testLoadbalancerAssemblyContextExists(newAssemblyContexts : Set(AssemblyContext)){
	assert error(hasAppliedStereotype(newAssemblyContexts,"LoadbalancerAssemblyContext")) 
		with log('There is no loadbalancer assembly context');
}

/**
* Tests whether there is only one Loadbalancer
**/
query testLoadbalancerAssemblyContextEqualsOne(newAssemblyContexts : Set(AssemblyContext)){
	var loadbalancerAssemblyContexts : Set(AssemblyContext) := newAssemblyContexts->select(assemblyContext : AssemblyContext| 
		hasAppliedStereotype(assemblyContext,"LoadbalancerAssemblyContext"));
	assert error(loadbalancerAssemblyContexts->size() = 1) 
		with log('The number of loadbalancer does not equal 1');
}

/**
* Tests whether the the number of all assembly contexts in the system after completion equals the number of assembly contexts 
* in the system before the completion plus the predefined number of replicas
**/
query testNewAssemblyContextsSizeEqualsOldAssemblyContextsSizePlusNumberOfReplicas(oldAssemblyContexts : Set(AssemblyContext), newAssemblyContexts : Set(AssemblyContext)){
	var replicableAssemblyContext : AssemblyContext := getStereotypedAssemblyContextBeforeCompletion("ReplicableAssemblyContext");
	var numberOfReplicas : Integer := getIntTaggedValue(replicableAssemblyContext,"numberOfReplicas","ReplicableAssemblyContext");
	var oldAssemblyContextsSize : Integer := oldAssemblyContexts->size();
	var newAssemblyContextsSize : Integer := newAssemblyContexts->size();
	assert error(oldAssemblyContextsSize + numberOfReplicas = newAssemblyContextsSize) 
		with log('The number of assembly contexts before completion('+oldAssemblyContextsSize.toString()+') plus the number of replicas('+numberOfReplicas.toString()+') 
					does not equal the number of new assembly contexts('+newAssemblyContextsSize.toString()+')');
}

/**
* Tests whether the original assembly context plus its duplicates equals the predefined number of replicas
**/
query testNumberOfReplicasEqualsNumberOfOriginalAndDuplicateAssemblyContexts(newAssemblyContexts : Set(AssemblyContext)){
	var replicableAssemblyContext : AssemblyContext := getStereotypedAssemblyContextBeforeCompletion("ReplicableAssemblyContext");
	var numberOfReplicas : Integer := getIntTaggedValue(replicableAssemblyContext,"numberOfReplicas","ReplicableAssemblyContext");
	var originalAndDuplicateAssemblyContext : Set(AssemblyContext) := newAssemblyContexts->select(assemblyContext : AssemblyContext| 
		hasAppliedStereotype(assemblyContext,"OriginalAssemblyContext") or hasAppliedStereotype(assemblyContext,"DuplicateAssemblyContext"));
	var numberOfOriginalAndDuplicateAssemblyContexts : Integer := originalAndDuplicateAssemblyContext->size();
	assert error(numberOfReplicas = numberOfOriginalAndDuplicateAssemblyContexts) 
		with log('The number of original and duplicate assembly contexts('+numberOfOriginalAndDuplicateAssemblyContexts.toString()+') does not equal the predefined number of replicas('+numberOfReplicas.toString()+')');
}

/**
* Tests whether there exists only one assembly connector between the loadbalancer and the original assembly context
**/
query testConnectorFromLoadbalancerToOriginalExists(newSystem : System){
	var originalAssemblyContext : AssemblyContext := getStereotypedAssemblyContextAfterCompletion("OriginalAssemblyContext");
	var loadbalancerAssemblyContext : AssemblyContext := getStereotypedAssemblyContextAfterCompletion("LoadbalancerAssemblyContext");
	var connectors : Set(Connector) := newSystem.connectors__ComposedStructure;
	var assemblyConnectors : Bag(AssemblyConnector) := connectors->select(connector : Connector | connector.oclIsTypeOf(AssemblyConnector)).oclAsType(AssemblyConnector);
	var loadbalancerToOriginalAssemblyConnectors : Bag(AssemblyConnector) := assemblyConnectors -> select(assemblyConnector : AssemblyConnector|
		assemblyConnector.requiringAssemblyContext_AssemblyConnector = loadbalancerAssemblyContext and assemblyConnector.providingAssemblyContext_AssemblyConnector = originalAssemblyContext);
	assert error(loadbalancerToOriginalAssemblyConnectors->size() = 1) 
		with log('The number of assembly connectors between the loadbalancer and the original assembly context does not equal 1');
}

/**
* Tests whether there is no assembly connector to the original assembly context other than from the loadbalancer
**/
query testAssemblyConnectorsOnlyBetweenLoadbalancerAndOriginalAssemblyContext(newSystem : System){
	var connectors : Set(Connector) := newSystem.connectors__ComposedStructure;
	var assemblyConnectors : Bag(AssemblyConnector) := connectors->select(connector : Connector | connector.oclIsTypeOf(AssemblyConnector)).oclAsType(AssemblyConnector);
	var originalAssemblyContext : AssemblyContext := getStereotypedAssemblyContextAfterCompletion("OriginalAssemblyContext");
	var loadbalancerAssemblyContext : AssemblyContext := getStereotypedAssemblyContextAfterCompletion("LoadbalancerAssemblyContext");
	var assemblyConnectorsNotFromLoadbalancer : Bag(AssemblyConnector) := assemblyConnectors->select(assemblyConnector : AssemblyConnector|
		 assemblyConnector.providingAssemblyContext_AssemblyConnector  = originalAssemblyContext and not(assemblyConnector.requiringAssemblyContext_AssemblyConnector = loadbalancerAssemblyContext));
	assert error (assemblyConnectorsNotFromLoadbalancer->isEmpty())
		with log('There exists an assembly connector between an assembly context other than the loadbalancer and the original assembly context');	
}

/**
* Tests whether there is no provided delegation connector to the original assembly context
**/
query testNoProvidedDelegationConnectorToOriginalAssemblyContext(newSystem : System){
	var connectors : Set(Connector) := newSystem.connectors__ComposedStructure;
	var providedDelegationConnectors : Bag(ProvidedDelegationConnector) := connectors->select(connector : Connector | connector.oclIsTypeOf(ProvidedDelegationConnector)).oclAsType(ProvidedDelegationConnector);
	var originalAssemblyContext : AssemblyContext := getStereotypedAssemblyContextAfterCompletion("OriginalAssemblyContext");	
	var providedDelegationConnectorsToOriginial : Bag(ProvidedDelegationConnector) := providedDelegationConnectors->select(providedDelegationConnector : ProvidedDelegationConnector|
		 providedDelegationConnector.assemblyContext_ProvidedDelegationConnector  = originalAssemblyContext);
	assert error (providedDelegationConnectorsToOriginial->isEmpty())
		with log('There exists a provided delegation connector to the original assembly context');	
}

/**
* Tests whether each of the duplicated assembly contexts is connected the the loadbalancer
**/
query testConnectorsFromLoadbalancerToDuplicatesExist(newSystem : System){
	var duplicateAssemblyContexts : Set(AssemblyContext) := getStereotypedAssemblyContextsAfterCompletion("DuplicateAssemblyContext");
	var loadbalancerAssemblyContext : AssemblyContext := getStereotypedAssemblyContextAfterCompletion("LoadbalancerAssemblyContext");
	var replicableAssemblyContext : AssemblyContext := getStereotypedAssemblyContextBeforeCompletion("ReplicableAssemblyContext");
	var numberOfReplicas : Integer := getIntTaggedValue(replicableAssemblyContext,"numberOfReplicas","ReplicableAssemblyContext");
	var connectors : Set(Connector) := newSystem.connectors__ComposedStructure;
	var assemblyConnectors : Bag(AssemblyConnector) := connectors->select(connector : Connector | connector.oclIsTypeOf(AssemblyConnector)).oclAsType(AssemblyConnector);
	var loadbalancerToDuplicatesAssemblyConnectors : Bag(AssemblyConnector) := assemblyConnectors->select(assemblyConnector : AssemblyConnector|
		assemblyConnector.requiringAssemblyContext_AssemblyConnector = loadbalancerAssemblyContext and duplicateAssemblyContexts->includes(assemblyConnector.providingAssemblyContext_AssemblyConnector));
	assert error(loadbalancerToDuplicatesAssemblyConnectors->size() = (numberOfReplicas-1)) 
		with log('The number of assembly connectors between the loadbalancer and the duplicate assembly contexts does not equal the number of replicas minus 1');
	assert error(loadbalancerToDuplicatesAssemblyConnectors.providingAssemblyContext_AssemblyConnector->includesAll(duplicateAssemblyContexts)) 
		with log('There is a duplicated assembly context which is the target of more than one assembly connector from the load balancer');
		
}
	
/**
* Tests whether the loadbalancer is target of all connectors that previously had the replicable assembly as a target 
**/
query testConnectorsOnlyToLoadbalancer(oldSystem : System, newSystem : System){
	var oldConnectors : Set(Connector) := oldSystem.connectors__ComposedStructure;
	var newConnectors : Set(Connector) := newSystem.connectors__ComposedStructure;
	var oldAssemblyContexts : Set(AssemblyContext) := oldSystem.assemblyContexts__ComposedStructure;
	var newAssemblyContexts : Set(AssemblyContext) := newSystem.assemblyContexts__ComposedStructure;
	var loadbalancerAssemblyContext : AssemblyContext := getStereotypedAssemblyContextAfterCompletion("LoadbalancerAssemblyContext");
	var replicableAssemblyContext : AssemblyContext := getStereotypedAssemblyContextBeforeCompletion("ReplicableAssemblyContext");
	var replicableConnectors : Set(Connector);
	var loadbalancerConnectors : Set(Connector);
					
	oldConnectors->forEach(oldConnector){
		if(oldConnector.oclIsTypeOf(AssemblyConnector)){
			var oldAssemblyConnector : AssemblyConnector := oldConnector.oclAsType(AssemblyConnector);
			if(oldAssemblyConnector.providingAssemblyContext_AssemblyConnector = replicableAssemblyContext){
				replicableConnectors += oldAssemblyConnector;
			};
		}
		else if(oldConnector.oclIsTypeOf(ProvidedDelegationConnector)){
			var oldProvidedDelegationConnector : ProvidedDelegationConnector := oldConnector.oclAsType(ProvidedDelegationConnector);
			if(oldProvidedDelegationConnector.assemblyContext_ProvidedDelegationConnector = replicableAssemblyContext){
				replicableConnectors += oldProvidedDelegationConnector;
			};
		};
	};
	newConnectors->forEach(newConnector){
		if(newConnector.oclIsTypeOf(AssemblyConnector)){
		var newAssemblyConnector : AssemblyConnector := newConnector.oclAsType(AssemblyConnector);
			if(newAssemblyConnector.providingAssemblyContext_AssemblyConnector = loadbalancerAssemblyContext){
				loadbalancerConnectors += newAssemblyConnector;
			};
		}
		else if(newConnector.oclIsTypeOf(ProvidedDelegationConnector)){
			var newProvidedDelegationConnector : ProvidedDelegationConnector := newConnector.oclAsType(ProvidedDelegationConnector);
			if(newProvidedDelegationConnector.assemblyContext_ProvidedDelegationConnector = loadbalancerAssemblyContext){
				loadbalancerConnectors += newProvidedDelegationConnector;
			};	
		};
	};
	replicableConnectors->forEach(replicableConnector){
		var loadbalancerConnector : Connector := loadbalancerConnectors->selectOne(connector : Connector | connector.id = replicableConnector.id);
		assert error(loadbalancerConnector != null) 
			with log('The loadbalancer '+loadbalancerAssemblyContext.id.toString()+' is not target of the connector '+replicableConnector.id.toString()+' previously connected with the replicable assembly context');
	
	};
}

/**
* Tests whether the duplicate assembly contexts encapsulate the repository component of the replicable assembly context
**/
query testDuplicateAssemblyContextsEncapsulateReplicableRepositoryComponent(){
	var duplicateAssemblyContexts : Set(AssemblyContext) := getStereotypedAssemblyContextsAfterCompletion("DuplicateAssemblyContext");
	var replicableAssemblyContext : AssemblyContext := getStereotypedAssemblyContextBeforeCompletion("ReplicableAssemblyContext");
	var replicableRepositoryComponent : RepositoryComponent := replicableAssemblyContext.encapsulatedComponent__AssemblyContext;
	duplicateAssemblyContexts->forEach(duplicateAssemblyContext){
		assert error(duplicateAssemblyContext.encapsulatedComponent__AssemblyContext.id = replicableRepositoryComponent.id)
			with log('The duplicated Assembly Context ' + duplicateAssemblyContext.id.toString()+ 'encapsulates not the replicable Repository Component '+ replicableRepositoryComponent.id.toString());
	};
}


/**
* Tests whether a loadbalancer repository component is newly created in the completion
**/
query testLoadbalancerRepositoryComponentIsNewlyCreated(oldSystem : System, newSystem : System){
	var loadbalancerAssemblyContext : AssemblyContext := getStereotypedAssemblyContextAfterCompletion("LoadbalancerAssemblyContext");
	var loadbalancerRepositoryComponent : RepositoryComponent := loadbalancerAssemblyContext.encapsulatedComponent__AssemblyContext;
	var replicableAssemblyContext : AssemblyContext := getStereotypedAssemblyContextBeforeCompletion("ReplicableAssemblyContext");
	var oldRepository : Repository := replicableAssemblyContext.encapsulatedComponent__AssemblyContext.repository__RepositoryComponent;
	var oldRepositoryComponents : Set(RepositoryComponent) := oldRepository.components__Repository;
	assert error(oldRepositoryComponents->excludes(loadbalancerRepositoryComponent)) 
			with log('The loadbalancer repository component already exists in the repository before completion');
	
}
/**
* Tests for each provided role of the replicable repository component whether the number 
* of loadbalancer's required roles equal the number of replicas
**/
query testNumberOfLoadbalancersRequiredRolesEqualsNumberOfReplicas(oldSystem : System, newSystem : System){
	var loadbalancerAssemblyContext : AssemblyContext := getStereotypedAssemblyContextAfterCompletion("LoadbalancerAssemblyContext");
	var loadbalancerRepositoryComponent : RepositoryComponent := loadbalancerAssemblyContext.encapsulatedComponent__AssemblyContext;
	var loadbalancerRequiredRoles : Bag(OperationRequiredRole) := loadbalancerRepositoryComponent.requiredRoles_InterfaceRequiringEntity.oclAsType(OperationRequiredRole);
	var replicableAssemblyContext : AssemblyContext := getStereotypedAssemblyContextBeforeCompletion("ReplicableAssemblyContext");
	var numberOfReplicas : Integer := getIntTaggedValue(replicableAssemblyContext,"numberOfReplicas","ReplicableAssemblyContext");
	var replicableRepositoryComponent : RepositoryComponent := replicableAssemblyContext.encapsulatedComponent__AssemblyContext;
	var replicableProvidedRoles : Bag(OperationProvidedRole) := replicableRepositoryComponent.providedRoles_InterfaceProvidingEntity.oclAsType(OperationProvidedRole);
	replicableProvidedRoles->forEach(providedRole){
		var matchedLoadbalancerRequiredRoles : Bag(OperationRequiredRole) := loadbalancerRequiredRoles->select(requiredRole : OperationRequiredRole | requiredRole.requiredInterface__OperationRequiredRole.id = providedRole.providedInterface__OperationProvidedRole.id);
		assert error(matchedLoadbalancerRequiredRoles->size() = numberOfReplicas) 
			with log('The loadbalancer repository component does not provide a sufficient number of required roles for a particular provided role');
	}
}

/**
* Tests whether all provided roles' interfaces of the loadbalancer repository component
* equal the provided roles' interfaces of the replicable assembly context repository component
**/
query testLoadbalancerProvidedRolesEqualReplicableProvidedRoles(oldSystem : System, newSystem : System){
	var loadbalancerAssemblyContext : AssemblyContext := getStereotypedAssemblyContextAfterCompletion("LoadbalancerAssemblyContext");
	var loadbalancerRepositoryComponent : RepositoryComponent := loadbalancerAssemblyContext.encapsulatedComponent__AssemblyContext;
	var loadbalancerProvidedRoles : Bag(OperationProvidedRole) :=loadbalancerRepositoryComponent.providedRoles_InterfaceProvidingEntity.oclAsType(OperationProvidedRole);
	var replicableAssemblyContext : AssemblyContext := getStereotypedAssemblyContextBeforeCompletion("ReplicableAssemblyContext");
	var replicableRepositoryComponent : RepositoryComponent := replicableAssemblyContext.encapsulatedComponent__AssemblyContext;
	var replicableProvidedRoles : Bag(OperationProvidedRole) := replicableRepositoryComponent.providedRoles_InterfaceProvidingEntity.oclAsType(OperationProvidedRole);
	replicableProvidedRoles ->forEach(replicableProvidedRole){
		var matchedLoadbalancerProvidedRole : OperationProvidedRole := loadbalancerProvidedRoles->selectOne(providedRole : OperationProvidedRole |  providedRole.providedInterface__OperationProvidedRole.id = replicableProvidedRole.providedInterface__OperationProvidedRole.id);
		assert error(matchedLoadbalancerProvidedRole!=null) 
			with log('The loadbalancer repository component does not provide a particular provided role provided by the replicable repository component');
		if(matchedLoadbalancerProvidedRole != null){
			loadbalancerProvidedRoles := loadbalancerProvidedRoles->excluding(matchedLoadbalancerProvidedRole);
		};
	};	
	assert error(loadbalancerProvidedRoles->size()=0) 
			with log('The loadbalancer repository component does not provide the same provided roles as the replicable repository component');
}

/**
* Tests whether the loadbalancer's SEFF has a branch for each required role
**/
query testLoadbalancerSeffCallsRequiredRoles(){
	var loadbalancerAssemblyContext : AssemblyContext := getStereotypedAssemblyContextAfterCompletion("LoadbalancerAssemblyContext");
	var loadbalancerRepositoryComponent : RepositoryComponent := loadbalancerAssemblyContext.encapsulatedComponent__AssemblyContext;
	var replicableAssemblyContext : AssemblyContext := getStereotypedAssemblyContextBeforeCompletion("ReplicableAssemblyContext");
	var replicableRepositoryComponent : RepositoryComponent := replicableAssemblyContext.encapsulatedComponent__AssemblyContext;
	var numberOfReplicas : Integer := getIntTaggedValue(replicableAssemblyContext,"numberOfReplicas","ReplicableAssemblyContext");
	var resourceDemandingSeffs : Bag(ResourceDemandingSEFF) := loadbalancerRepositoryComponent.oclAsType(BasicComponent).serviceEffectSpecifications__BasicComponent.oclAsType(ResourceDemandingSEFF);
	var branchActions : Set(BranchAction);
	var branches : Bag(AbstractBranchTransition);
	resourceDemandingSeffs->forEach(resourceDemandingSeff){
		branchActions := resourceDemandingSeff.steps_Behaviour->selectByType(BranchAction);
		branches := branchActions.branches_Branch;
		assert error(branches->size()=numberOfReplicas) 
			with log('The loadbalancers Seff does not call every required role in the right way');
	};
}

/**
* Tests whether there are number of replicas many new resource container
**/
query testNumberOfNewResourceContainer(oldAllocation : Allocation, newAllocation : Allocation){
	var replicableAssemblyContext : AssemblyContext := getStereotypedAssemblyContextBeforeCompletion("ReplicableAssemblyContext");
		getStereotypedAssemblyContextBeforeCompletion("ReplicableAssemblyContext");
	var numberOfReplicas : Integer := getIntTaggedValue(replicableAssemblyContext,"numberOfReplicas","ReplicableAssemblyContext");
	var oldResEnv : ResourceEnvironment := getOldResourceEnvironment();
	var newResEnv : ResourceEnvironment := getNewResourceEnvironment();
	var oldResContainerSize : Integer := getOldResourceContainer()->size();
	var newResContainerSize : Integer := getNewResourceContainer()->size();
	assert error(oldResContainerSize + numberOfReplicas = newResContainerSize) 
		with log('The number of resource container after completion does not equal the number before completion plus number of replicas');
}

/**
* Tests whether each duplicate is allocated to a newly created resource container
**/
query testDuplicatesAllocatedToNewResourceContainer(oldAllocation : Allocation, newAllocation : Allocation){
	var duplicateAssemblyContexts : Set(AssemblyContext) := getStereotypedAssemblyContextsAfterCompletion("DuplicateAssemblyContext");
	var oldResContainer : Set(ResourceContainer) := getOldResourceContainer();
	var newResContainer: Set(ResourceContainer) := getNewResourceContainer();
	var duplicateResContainer : Set(ResourceContainer) := newResContainer-(oldResContainer);
	duplicateAssemblyContexts->forEach(assemblyContext){
		var duplicateAllocationContext : AllocationContext := getAllocationContextFromAssemblyContextAfterCompletion(assemblyContext);
		assert error(duplicateAllocationContext->size() = 1) 
			with log('A duplicate assembly context is not allocated to a resource container');
		var relatedResourceContainer : Set(ResourceContainer):= duplicateAllocationContext.resourceContainer_AllocationContext->asSet();
		assert error(duplicateResContainer->includesAll(relatedResourceContainer))
			with log('A duplicate is allocated to a resource container that was not newly created');
	};
}

/**
* Tests whether the loadbalancer is allocated to a newly created resource container
**/
query testLoadbalancerAllocatedToNewResourceContainer(oldAllocation : Allocation, newAllocation : Allocation){
	var loadbalancerAssemblyContext : AssemblyContext := getStereotypedAssemblyContextAfterCompletion("LoadbalancerAssemblyContext");
	var oldResContainer : Set(ResourceContainer) := getOldResourceContainer();
	var newResContainer: Set(ResourceContainer) := getNewResourceContainer();
	var duplicateResContainer : Set(ResourceContainer) := newResContainer-(oldResContainer);
	var loadbalancerAllocationContext : AllocationContext := getAllocationContextFromAssemblyContextAfterCompletion(loadbalancerAssemblyContext);
	assert error(loadbalancerAllocationContext->size() = 1) 
		with log('The loadbalancer assembly context is not allocated to a resource container');
	var loadbalancerResourceContainer : ResourceContainer:= loadbalancerAllocationContext.resourceContainer_AllocationContext;
	assert error(duplicateResContainer->includes(loadbalancerResourceContainer))
		with log('The loadbalancer is allocated to a resource container that was not newly created');
}

/**
* Tests whether the duplicated resource container are connected to the same linking 
* resource as the replicable's resource container
**/
query testDuplicateResourceContainerConnectedToSameLinkingResource(oldAllocation : Allocation, newAllocation : Allocation){
	var duplicateAssemblyContexts : Set(AssemblyContext) := getStereotypedAssemblyContextsAfterCompletion("DuplicateAssemblyContext");
	var duplicateAllocationContexts : Set(AllocationContext) := getAllocationContextsFromAssemblyContextsAfterCompletion(duplicateAssemblyContexts);
	var duplicateResContainer : Bag(ResourceContainer) := duplicateAllocationContexts.resourceContainer_AllocationContext;
	var originalAssemblyContext : AssemblyContext := getStereotypedAssemblyContextAfterCompletion("OriginalAssemblyContext");
	var originalAllocationContext : AllocationContext := getAllocationContextFromAssemblyContextAfterCompletion(originalAssemblyContext);
	var originalResourceContainer : ResourceContainer := originalAllocationContext.resourceContainer_AllocationContext;
	var originalLinkingResources : Set(LinkingResource) := getLinkingResourcesFromResourceContainerAfterCompletion(originalResourceContainer);
	var originalLinkingResourceContainer : Bag(ResourceContainer) := originalLinkingResources.connectedResourceContainers_LinkingResource;
	assert error(originalLinkingResourceContainer->includesAll(duplicateResContainer))
		with log('A duplicate resource container is not connected with the replicable linking resource');
}

/**
* Tests whether  the loadbalancers resource container is connected with the replicable linking resource
**/
query testLoadblancerResourceContainerConntectedToSameLinkingResource(oldAllocation : Allocation, newAllocation : Allocation){
	var loadbalancerAssemblyContext : AssemblyContext := getStereotypedAssemblyContextAfterCompletion("LoadbalancerAssemblyContext");
	var loadbalancerAllocationContext : AllocationContext := getAllocationContextFromAssemblyContextAfterCompletion(loadbalancerAssemblyContext);
	var loadbalancerResourceContainer : ResourceContainer:= loadbalancerAllocationContext.resourceContainer_AllocationContext;
	var originalAssemblyContext : AssemblyContext := getStereotypedAssemblyContextAfterCompletion("OriginalAssemblyContext");
	var originalAllocationContext : AllocationContext := getAllocationContextFromAssemblyContextAfterCompletion(originalAssemblyContext);
	var originalResourceContainer : ResourceContainer := originalAllocationContext.resourceContainer_AllocationContext;
	var originalLinkingResource : Set(LinkingResource) := getLinkingResourcesFromResourceContainerAfterCompletion(originalResourceContainer);
	assert error(originalLinkingResource.connectedResourceContainers_LinkingResource->includes(loadbalancerResourceContainer))
		with log('The loadbalancer resource container is not connected with the replicable linking resource');
}

query getStereotypedAssemblyContextAfterCompletion(stereotypeName : String):AssemblyContext{
	return newAllocation.system_Allocation.assemblyContexts__ComposedStructure->selectOne(assemblyContext : AssemblyContext|hasAppliedStereotype(assemblyContext,stereotypeName));
}

query getStereotypedAssemblyContextsAfterCompletion(stereotypeName : String):Set(AssemblyContext){
	return newAllocation.system_Allocation.assemblyContexts__ComposedStructure->select(assemblyContext : AssemblyContext|hasAppliedStereotype(assemblyContext,stereotypeName));
}

query getAllocationContextFromAssemblyContextAfterCompletion(assemblyContext : AssemblyContext):AllocationContext{
	return newAllocation.allocationContexts_Allocation->selectOne(allocationContext : AllocationContext | allocationContext.assemblyContext_AllocationContext = assemblyContext);
}

query getAllocationContextsFromAssemblyContextsAfterCompletion(assemblyContexts:Set(AssemblyContext)):Set(AllocationContext) {
	return newAllocation.allocationContexts_Allocation->select(allocationContext : AllocationContext | assemblyContexts->includes(allocationContext.assemblyContext_AllocationContext));
}
query getStereotypedAssemblyContextBeforeCompletion(stereotypeName : String):AssemblyContext{
	return oldAllocation.system_Allocation.assemblyContexts__ComposedStructure->selectOne(assemblyContext : AssemblyContext|hasAppliedStereotype(assemblyContext,stereotypeName));
}

query getAllocationContextFromStereotypedAssemblyContextBeforeCompletion(stereotypeName : String):AllocationContext{
	return oldAllocation.allocationContexts_Allocation->selectOne(allocationContext : AllocationContext | allocationContext.assemblyContext_AllocationContext = getStereotypedAssemblyContextBeforeCompletion(stereotypeName));
}

query getLinkingResourcesFromResourceContainerAfterCompletion(resourceContainer : ResourceContainer):Set(LinkingResource){
	return newAllocation.targetResourceEnvironment_Allocation.linkingResources__ResourceEnvironment->select(linkingResource : LinkingResource| linkingResource.connectedResourceContainers_LinkingResource->includes(resourceContainer));
}

query getOldResourceEnvironment():ResourceEnvironment{
	return oldAllocation.targetResourceEnvironment_Allocation;
}

query getNewResourceEnvironment():ResourceEnvironment{
	return newAllocation.targetResourceEnvironment_Allocation;
}

query getOldResourceContainer():Set(ResourceContainer){
	return getOldResourceEnvironment().resourceContainer_ResourceEnvironment;
}

query getNewResourceContainer():Set(ResourceContainer){
	return getNewResourceEnvironment().resourceContainer_ResourceEnvironment;
}